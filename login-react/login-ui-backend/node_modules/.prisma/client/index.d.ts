
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Building
 * 
 */
export type Building = $Result.DefaultSelection<Prisma.$BuildingPayload>
/**
 * Model Congregation
 * 
 */
export type Congregation = $Result.DefaultSelection<Prisma.$CongregationPayload>
/**
 * Model Door
 * 
 */
export type Door = $Result.DefaultSelection<Prisma.$DoorPayload>
/**
 * Model Language
 * 
 */
export type Language = $Result.DefaultSelection<Prisma.$LanguagePayload>
/**
 * Model Publisher
 * 
 */
export type Publisher = $Result.DefaultSelection<Prisma.$PublisherPayload>
/**
 * Model Territory
 * 
 */
export type Territory = $Result.DefaultSelection<Prisma.$TerritoryPayload>
/**
 * Model App1Entry
 * 
 */
export type App1Entry = $Result.DefaultSelection<Prisma.$App1EntryPayload>
/**
 * Model Login
 * 
 */
export type Login = $Result.DefaultSelection<Prisma.$LoginPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Buildings
 * const buildings = await prisma.building.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Buildings
   * const buildings = await prisma.building.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.building`: Exposes CRUD operations for the **Building** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buildings
    * const buildings = await prisma.building.findMany()
    * ```
    */
  get building(): Prisma.BuildingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.congregation`: Exposes CRUD operations for the **Congregation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Congregations
    * const congregations = await prisma.congregation.findMany()
    * ```
    */
  get congregation(): Prisma.CongregationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.door`: Exposes CRUD operations for the **Door** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doors
    * const doors = await prisma.door.findMany()
    * ```
    */
  get door(): Prisma.DoorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.language`: Exposes CRUD operations for the **Language** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.language.findMany()
    * ```
    */
  get language(): Prisma.LanguageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.publisher`: Exposes CRUD operations for the **Publisher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Publishers
    * const publishers = await prisma.publisher.findMany()
    * ```
    */
  get publisher(): Prisma.PublisherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.territory`: Exposes CRUD operations for the **Territory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Territories
    * const territories = await prisma.territory.findMany()
    * ```
    */
  get territory(): Prisma.TerritoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.app1Entry`: Exposes CRUD operations for the **App1Entry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more App1Entries
    * const app1Entries = await prisma.app1Entry.findMany()
    * ```
    */
  get app1Entry(): Prisma.App1EntryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.login`: Exposes CRUD operations for the **Login** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logins
    * const logins = await prisma.login.findMany()
    * ```
    */
  get login(): Prisma.LoginDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Building: 'Building',
    Congregation: 'Congregation',
    Door: 'Door',
    Language: 'Language',
    Publisher: 'Publisher',
    Territory: 'Territory',
    App1Entry: 'App1Entry',
    Login: 'Login'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "building" | "congregation" | "door" | "language" | "publisher" | "territory" | "app1Entry" | "login"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Building: {
        payload: Prisma.$BuildingPayload<ExtArgs>
        fields: Prisma.BuildingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuildingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuildingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          findFirst: {
            args: Prisma.BuildingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuildingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          findMany: {
            args: Prisma.BuildingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>[]
          }
          create: {
            args: Prisma.BuildingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          createMany: {
            args: Prisma.BuildingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BuildingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          update: {
            args: Prisma.BuildingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          deleteMany: {
            args: Prisma.BuildingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuildingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BuildingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          aggregate: {
            args: Prisma.BuildingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuilding>
          }
          groupBy: {
            args: Prisma.BuildingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuildingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuildingCountArgs<ExtArgs>
            result: $Utils.Optional<BuildingCountAggregateOutputType> | number
          }
        }
      }
      Congregation: {
        payload: Prisma.$CongregationPayload<ExtArgs>
        fields: Prisma.CongregationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CongregationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CongregationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CongregationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CongregationPayload>
          }
          findFirst: {
            args: Prisma.CongregationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CongregationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CongregationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CongregationPayload>
          }
          findMany: {
            args: Prisma.CongregationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CongregationPayload>[]
          }
          create: {
            args: Prisma.CongregationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CongregationPayload>
          }
          createMany: {
            args: Prisma.CongregationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CongregationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CongregationPayload>
          }
          update: {
            args: Prisma.CongregationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CongregationPayload>
          }
          deleteMany: {
            args: Prisma.CongregationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CongregationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CongregationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CongregationPayload>
          }
          aggregate: {
            args: Prisma.CongregationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCongregation>
          }
          groupBy: {
            args: Prisma.CongregationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CongregationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CongregationCountArgs<ExtArgs>
            result: $Utils.Optional<CongregationCountAggregateOutputType> | number
          }
        }
      }
      Door: {
        payload: Prisma.$DoorPayload<ExtArgs>
        fields: Prisma.DoorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoorPayload>
          }
          findFirst: {
            args: Prisma.DoorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoorPayload>
          }
          findMany: {
            args: Prisma.DoorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoorPayload>[]
          }
          create: {
            args: Prisma.DoorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoorPayload>
          }
          createMany: {
            args: Prisma.DoorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DoorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoorPayload>
          }
          update: {
            args: Prisma.DoorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoorPayload>
          }
          deleteMany: {
            args: Prisma.DoorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DoorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoorPayload>
          }
          aggregate: {
            args: Prisma.DoorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoor>
          }
          groupBy: {
            args: Prisma.DoorGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoorGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoorCountArgs<ExtArgs>
            result: $Utils.Optional<DoorCountAggregateOutputType> | number
          }
        }
      }
      Language: {
        payload: Prisma.$LanguagePayload<ExtArgs>
        fields: Prisma.LanguageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          findFirst: {
            args: Prisma.LanguageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          findMany: {
            args: Prisma.LanguageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>[]
          }
          create: {
            args: Prisma.LanguageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          createMany: {
            args: Prisma.LanguageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LanguageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          update: {
            args: Prisma.LanguageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          deleteMany: {
            args: Prisma.LanguageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LanguageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LanguageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          aggregate: {
            args: Prisma.LanguageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguage>
          }
          groupBy: {
            args: Prisma.LanguageGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguageGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguageCountArgs<ExtArgs>
            result: $Utils.Optional<LanguageCountAggregateOutputType> | number
          }
        }
      }
      Publisher: {
        payload: Prisma.$PublisherPayload<ExtArgs>
        fields: Prisma.PublisherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PublisherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublisherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PublisherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublisherPayload>
          }
          findFirst: {
            args: Prisma.PublisherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublisherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PublisherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublisherPayload>
          }
          findMany: {
            args: Prisma.PublisherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublisherPayload>[]
          }
          create: {
            args: Prisma.PublisherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublisherPayload>
          }
          createMany: {
            args: Prisma.PublisherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PublisherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublisherPayload>
          }
          update: {
            args: Prisma.PublisherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublisherPayload>
          }
          deleteMany: {
            args: Prisma.PublisherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PublisherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PublisherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublisherPayload>
          }
          aggregate: {
            args: Prisma.PublisherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePublisher>
          }
          groupBy: {
            args: Prisma.PublisherGroupByArgs<ExtArgs>
            result: $Utils.Optional<PublisherGroupByOutputType>[]
          }
          count: {
            args: Prisma.PublisherCountArgs<ExtArgs>
            result: $Utils.Optional<PublisherCountAggregateOutputType> | number
          }
        }
      }
      Territory: {
        payload: Prisma.$TerritoryPayload<ExtArgs>
        fields: Prisma.TerritoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TerritoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TerritoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          findFirst: {
            args: Prisma.TerritoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TerritoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          findMany: {
            args: Prisma.TerritoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>[]
          }
          create: {
            args: Prisma.TerritoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          createMany: {
            args: Prisma.TerritoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TerritoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          update: {
            args: Prisma.TerritoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          deleteMany: {
            args: Prisma.TerritoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TerritoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TerritoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerritoryPayload>
          }
          aggregate: {
            args: Prisma.TerritoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTerritory>
          }
          groupBy: {
            args: Prisma.TerritoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<TerritoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.TerritoryCountArgs<ExtArgs>
            result: $Utils.Optional<TerritoryCountAggregateOutputType> | number
          }
        }
      }
      App1Entry: {
        payload: Prisma.$App1EntryPayload<ExtArgs>
        fields: Prisma.App1EntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.App1EntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$App1EntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.App1EntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$App1EntryPayload>
          }
          findFirst: {
            args: Prisma.App1EntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$App1EntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.App1EntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$App1EntryPayload>
          }
          findMany: {
            args: Prisma.App1EntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$App1EntryPayload>[]
          }
          create: {
            args: Prisma.App1EntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$App1EntryPayload>
          }
          createMany: {
            args: Prisma.App1EntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.App1EntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$App1EntryPayload>
          }
          update: {
            args: Prisma.App1EntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$App1EntryPayload>
          }
          deleteMany: {
            args: Prisma.App1EntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.App1EntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.App1EntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$App1EntryPayload>
          }
          aggregate: {
            args: Prisma.App1EntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApp1Entry>
          }
          groupBy: {
            args: Prisma.App1EntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<App1EntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.App1EntryCountArgs<ExtArgs>
            result: $Utils.Optional<App1EntryCountAggregateOutputType> | number
          }
        }
      }
      Login: {
        payload: Prisma.$LoginPayload<ExtArgs>
        fields: Prisma.LoginFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoginFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoginFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          findFirst: {
            args: Prisma.LoginFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoginFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          findMany: {
            args: Prisma.LoginFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>[]
          }
          create: {
            args: Prisma.LoginCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          createMany: {
            args: Prisma.LoginCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LoginDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          update: {
            args: Prisma.LoginUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          deleteMany: {
            args: Prisma.LoginDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoginUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LoginUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginPayload>
          }
          aggregate: {
            args: Prisma.LoginAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLogin>
          }
          groupBy: {
            args: Prisma.LoginGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoginGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoginCountArgs<ExtArgs>
            result: $Utils.Optional<LoginCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    building?: BuildingOmit
    congregation?: CongregationOmit
    door?: DoorOmit
    language?: LanguageOmit
    publisher?: PublisherOmit
    territory?: TerritoryOmit
    app1Entry?: App1EntryOmit
    login?: LoginOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BuildingCountOutputType
   */

  export type BuildingCountOutputType = {
    Door: number
  }

  export type BuildingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Door?: boolean | BuildingCountOutputTypeCountDoorArgs
  }

  // Custom InputTypes
  /**
   * BuildingCountOutputType without action
   */
  export type BuildingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingCountOutputType
     */
    select?: BuildingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuildingCountOutputType without action
   */
  export type BuildingCountOutputTypeCountDoorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoorWhereInput
  }


  /**
   * Count Type CongregationCountOutputType
   */

  export type CongregationCountOutputType = {
    Door: number
    Language: number
    Login: number
    Publisher: number
    Territory: number
  }

  export type CongregationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Door?: boolean | CongregationCountOutputTypeCountDoorArgs
    Language?: boolean | CongregationCountOutputTypeCountLanguageArgs
    Login?: boolean | CongregationCountOutputTypeCountLoginArgs
    Publisher?: boolean | CongregationCountOutputTypeCountPublisherArgs
    Territory?: boolean | CongregationCountOutputTypeCountTerritoryArgs
  }

  // Custom InputTypes
  /**
   * CongregationCountOutputType without action
   */
  export type CongregationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CongregationCountOutputType
     */
    select?: CongregationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CongregationCountOutputType without action
   */
  export type CongregationCountOutputTypeCountDoorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoorWhereInput
  }

  /**
   * CongregationCountOutputType without action
   */
  export type CongregationCountOutputTypeCountLanguageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageWhereInput
  }

  /**
   * CongregationCountOutputType without action
   */
  export type CongregationCountOutputTypeCountLoginArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoginWhereInput
  }

  /**
   * CongregationCountOutputType without action
   */
  export type CongregationCountOutputTypeCountPublisherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublisherWhereInput
  }

  /**
   * CongregationCountOutputType without action
   */
  export type CongregationCountOutputTypeCountTerritoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TerritoryWhereInput
  }


  /**
   * Count Type LanguageCountOutputType
   */

  export type LanguageCountOutputType = {
    Door: number
  }

  export type LanguageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Door?: boolean | LanguageCountOutputTypeCountDoorArgs
  }

  // Custom InputTypes
  /**
   * LanguageCountOutputType without action
   */
  export type LanguageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageCountOutputType
     */
    select?: LanguageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LanguageCountOutputType without action
   */
  export type LanguageCountOutputTypeCountDoorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoorWhereInput
  }


  /**
   * Count Type TerritoryCountOutputType
   */

  export type TerritoryCountOutputType = {
    Building: number
  }

  export type TerritoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Building?: boolean | TerritoryCountOutputTypeCountBuildingArgs
  }

  // Custom InputTypes
  /**
   * TerritoryCountOutputType without action
   */
  export type TerritoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerritoryCountOutputType
     */
    select?: TerritoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TerritoryCountOutputType without action
   */
  export type TerritoryCountOutputTypeCountBuildingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildingWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Building
   */

  export type AggregateBuilding = {
    _count: BuildingCountAggregateOutputType | null
    _avg: BuildingAvgAggregateOutputType | null
    _sum: BuildingSumAggregateOutputType | null
    _min: BuildingMinAggregateOutputType | null
    _max: BuildingMaxAggregateOutputType | null
  }

  export type BuildingAvgAggregateOutputType = {
    idBuilding: number | null
    lat: number | null
    long: number | null
    territory_id: number | null
  }

  export type BuildingSumAggregateOutputType = {
    idBuilding: number | null
    lat: number | null
    long: number | null
    territory_id: number | null
  }

  export type BuildingMinAggregateOutputType = {
    idBuilding: number | null
    lat: number | null
    long: number | null
    territory_id: number | null
    last_modified: Date | null
    address: string | null
    updatedAt: Date | null
  }

  export type BuildingMaxAggregateOutputType = {
    idBuilding: number | null
    lat: number | null
    long: number | null
    territory_id: number | null
    last_modified: Date | null
    address: string | null
    updatedAt: Date | null
  }

  export type BuildingCountAggregateOutputType = {
    idBuilding: number
    lat: number
    long: number
    territory_id: number
    last_modified: number
    address: number
    updatedAt: number
    _all: number
  }


  export type BuildingAvgAggregateInputType = {
    idBuilding?: true
    lat?: true
    long?: true
    territory_id?: true
  }

  export type BuildingSumAggregateInputType = {
    idBuilding?: true
    lat?: true
    long?: true
    territory_id?: true
  }

  export type BuildingMinAggregateInputType = {
    idBuilding?: true
    lat?: true
    long?: true
    territory_id?: true
    last_modified?: true
    address?: true
    updatedAt?: true
  }

  export type BuildingMaxAggregateInputType = {
    idBuilding?: true
    lat?: true
    long?: true
    territory_id?: true
    last_modified?: true
    address?: true
    updatedAt?: true
  }

  export type BuildingCountAggregateInputType = {
    idBuilding?: true
    lat?: true
    long?: true
    territory_id?: true
    last_modified?: true
    address?: true
    updatedAt?: true
    _all?: true
  }

  export type BuildingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Building to aggregate.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Buildings
    **/
    _count?: true | BuildingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuildingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuildingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuildingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuildingMaxAggregateInputType
  }

  export type GetBuildingAggregateType<T extends BuildingAggregateArgs> = {
        [P in keyof T & keyof AggregateBuilding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuilding[P]>
      : GetScalarType<T[P], AggregateBuilding[P]>
  }




  export type BuildingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildingWhereInput
    orderBy?: BuildingOrderByWithAggregationInput | BuildingOrderByWithAggregationInput[]
    by: BuildingScalarFieldEnum[] | BuildingScalarFieldEnum
    having?: BuildingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuildingCountAggregateInputType | true
    _avg?: BuildingAvgAggregateInputType
    _sum?: BuildingSumAggregateInputType
    _min?: BuildingMinAggregateInputType
    _max?: BuildingMaxAggregateInputType
  }

  export type BuildingGroupByOutputType = {
    idBuilding: number
    lat: number
    long: number
    territory_id: number | null
    last_modified: Date
    address: string | null
    updatedAt: Date | null
    _count: BuildingCountAggregateOutputType | null
    _avg: BuildingAvgAggregateOutputType | null
    _sum: BuildingSumAggregateOutputType | null
    _min: BuildingMinAggregateOutputType | null
    _max: BuildingMaxAggregateOutputType | null
  }

  type GetBuildingGroupByPayload<T extends BuildingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuildingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuildingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuildingGroupByOutputType[P]>
            : GetScalarType<T[P], BuildingGroupByOutputType[P]>
        }
      >
    >


  export type BuildingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idBuilding?: boolean
    lat?: boolean
    long?: boolean
    territory_id?: boolean
    last_modified?: boolean
    address?: boolean
    updatedAt?: boolean
    Territory?: boolean | Building$TerritoryArgs<ExtArgs>
    Door?: boolean | Building$DoorArgs<ExtArgs>
    _count?: boolean | BuildingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["building"]>



  export type BuildingSelectScalar = {
    idBuilding?: boolean
    lat?: boolean
    long?: boolean
    territory_id?: boolean
    last_modified?: boolean
    address?: boolean
    updatedAt?: boolean
  }

  export type BuildingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idBuilding" | "lat" | "long" | "territory_id" | "last_modified" | "address" | "updatedAt", ExtArgs["result"]["building"]>
  export type BuildingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Territory?: boolean | Building$TerritoryArgs<ExtArgs>
    Door?: boolean | Building$DoorArgs<ExtArgs>
    _count?: boolean | BuildingCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BuildingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Building"
    objects: {
      Territory: Prisma.$TerritoryPayload<ExtArgs> | null
      Door: Prisma.$DoorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idBuilding: number
      lat: number
      long: number
      territory_id: number | null
      last_modified: Date
      address: string | null
      updatedAt: Date | null
    }, ExtArgs["result"]["building"]>
    composites: {}
  }

  type BuildingGetPayload<S extends boolean | null | undefined | BuildingDefaultArgs> = $Result.GetResult<Prisma.$BuildingPayload, S>

  type BuildingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuildingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuildingCountAggregateInputType | true
    }

  export interface BuildingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Building'], meta: { name: 'Building' } }
    /**
     * Find zero or one Building that matches the filter.
     * @param {BuildingFindUniqueArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuildingFindUniqueArgs>(args: SelectSubset<T, BuildingFindUniqueArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Building that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuildingFindUniqueOrThrowArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuildingFindUniqueOrThrowArgs>(args: SelectSubset<T, BuildingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Building that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingFindFirstArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuildingFindFirstArgs>(args?: SelectSubset<T, BuildingFindFirstArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Building that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingFindFirstOrThrowArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuildingFindFirstOrThrowArgs>(args?: SelectSubset<T, BuildingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Buildings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buildings
     * const buildings = await prisma.building.findMany()
     * 
     * // Get first 10 Buildings
     * const buildings = await prisma.building.findMany({ take: 10 })
     * 
     * // Only select the `idBuilding`
     * const buildingWithIdBuildingOnly = await prisma.building.findMany({ select: { idBuilding: true } })
     * 
     */
    findMany<T extends BuildingFindManyArgs>(args?: SelectSubset<T, BuildingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Building.
     * @param {BuildingCreateArgs} args - Arguments to create a Building.
     * @example
     * // Create one Building
     * const Building = await prisma.building.create({
     *   data: {
     *     // ... data to create a Building
     *   }
     * })
     * 
     */
    create<T extends BuildingCreateArgs>(args: SelectSubset<T, BuildingCreateArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Buildings.
     * @param {BuildingCreateManyArgs} args - Arguments to create many Buildings.
     * @example
     * // Create many Buildings
     * const building = await prisma.building.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuildingCreateManyArgs>(args?: SelectSubset<T, BuildingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Building.
     * @param {BuildingDeleteArgs} args - Arguments to delete one Building.
     * @example
     * // Delete one Building
     * const Building = await prisma.building.delete({
     *   where: {
     *     // ... filter to delete one Building
     *   }
     * })
     * 
     */
    delete<T extends BuildingDeleteArgs>(args: SelectSubset<T, BuildingDeleteArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Building.
     * @param {BuildingUpdateArgs} args - Arguments to update one Building.
     * @example
     * // Update one Building
     * const building = await prisma.building.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuildingUpdateArgs>(args: SelectSubset<T, BuildingUpdateArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Buildings.
     * @param {BuildingDeleteManyArgs} args - Arguments to filter Buildings to delete.
     * @example
     * // Delete a few Buildings
     * const { count } = await prisma.building.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuildingDeleteManyArgs>(args?: SelectSubset<T, BuildingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buildings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buildings
     * const building = await prisma.building.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuildingUpdateManyArgs>(args: SelectSubset<T, BuildingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Building.
     * @param {BuildingUpsertArgs} args - Arguments to update or create a Building.
     * @example
     * // Update or create a Building
     * const building = await prisma.building.upsert({
     *   create: {
     *     // ... data to create a Building
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Building we want to update
     *   }
     * })
     */
    upsert<T extends BuildingUpsertArgs>(args: SelectSubset<T, BuildingUpsertArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Buildings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingCountArgs} args - Arguments to filter Buildings to count.
     * @example
     * // Count the number of Buildings
     * const count = await prisma.building.count({
     *   where: {
     *     // ... the filter for the Buildings we want to count
     *   }
     * })
    **/
    count<T extends BuildingCountArgs>(
      args?: Subset<T, BuildingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuildingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Building.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuildingAggregateArgs>(args: Subset<T, BuildingAggregateArgs>): Prisma.PrismaPromise<GetBuildingAggregateType<T>>

    /**
     * Group by Building.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuildingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuildingGroupByArgs['orderBy'] }
        : { orderBy?: BuildingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuildingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuildingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Building model
   */
  readonly fields: BuildingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Building.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuildingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Territory<T extends Building$TerritoryArgs<ExtArgs> = {}>(args?: Subset<T, Building$TerritoryArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Door<T extends Building$DoorArgs<ExtArgs> = {}>(args?: Subset<T, Building$DoorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Building model
   */
  interface BuildingFieldRefs {
    readonly idBuilding: FieldRef<"Building", 'Int'>
    readonly lat: FieldRef<"Building", 'Float'>
    readonly long: FieldRef<"Building", 'Float'>
    readonly territory_id: FieldRef<"Building", 'Int'>
    readonly last_modified: FieldRef<"Building", 'DateTime'>
    readonly address: FieldRef<"Building", 'String'>
    readonly updatedAt: FieldRef<"Building", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Building findUnique
   */
  export type BuildingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building findUniqueOrThrow
   */
  export type BuildingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building findFirst
   */
  export type BuildingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buildings.
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buildings.
     */
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * Building findFirstOrThrow
   */
  export type BuildingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buildings.
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buildings.
     */
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * Building findMany
   */
  export type BuildingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Buildings to fetch.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Buildings.
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * Building create
   */
  export type BuildingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * The data needed to create a Building.
     */
    data: XOR<BuildingCreateInput, BuildingUncheckedCreateInput>
  }

  /**
   * Building createMany
   */
  export type BuildingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Buildings.
     */
    data: BuildingCreateManyInput | BuildingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Building update
   */
  export type BuildingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * The data needed to update a Building.
     */
    data: XOR<BuildingUpdateInput, BuildingUncheckedUpdateInput>
    /**
     * Choose, which Building to update.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building updateMany
   */
  export type BuildingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Buildings.
     */
    data: XOR<BuildingUpdateManyMutationInput, BuildingUncheckedUpdateManyInput>
    /**
     * Filter which Buildings to update
     */
    where?: BuildingWhereInput
    /**
     * Limit how many Buildings to update.
     */
    limit?: number
  }

  /**
   * Building upsert
   */
  export type BuildingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * The filter to search for the Building to update in case it exists.
     */
    where: BuildingWhereUniqueInput
    /**
     * In case the Building found by the `where` argument doesn't exist, create a new Building with this data.
     */
    create: XOR<BuildingCreateInput, BuildingUncheckedCreateInput>
    /**
     * In case the Building was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuildingUpdateInput, BuildingUncheckedUpdateInput>
  }

  /**
   * Building delete
   */
  export type BuildingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter which Building to delete.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building deleteMany
   */
  export type BuildingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buildings to delete
     */
    where?: BuildingWhereInput
    /**
     * Limit how many Buildings to delete.
     */
    limit?: number
  }

  /**
   * Building.Territory
   */
  export type Building$TerritoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    where?: TerritoryWhereInput
  }

  /**
   * Building.Door
   */
  export type Building$DoorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    where?: DoorWhereInput
    orderBy?: DoorOrderByWithRelationInput | DoorOrderByWithRelationInput[]
    cursor?: DoorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoorScalarFieldEnum | DoorScalarFieldEnum[]
  }

  /**
   * Building without action
   */
  export type BuildingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
  }


  /**
   * Model Congregation
   */

  export type AggregateCongregation = {
    _count: CongregationCountAggregateOutputType | null
    _avg: CongregationAvgAggregateOutputType | null
    _sum: CongregationSumAggregateOutputType | null
    _min: CongregationMinAggregateOutputType | null
    _max: CongregationMaxAggregateOutputType | null
  }

  export type CongregationAvgAggregateOutputType = {
    idCongregation: number | null
  }

  export type CongregationSumAggregateOutputType = {
    idCongregation: number | null
  }

  export type CongregationMinAggregateOutputType = {
    idCongregation: number | null
    name: string | null
    language: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CongregationMaxAggregateOutputType = {
    idCongregation: number | null
    name: string | null
    language: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CongregationCountAggregateOutputType = {
    idCongregation: number
    name: number
    language: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CongregationAvgAggregateInputType = {
    idCongregation?: true
  }

  export type CongregationSumAggregateInputType = {
    idCongregation?: true
  }

  export type CongregationMinAggregateInputType = {
    idCongregation?: true
    name?: true
    language?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CongregationMaxAggregateInputType = {
    idCongregation?: true
    name?: true
    language?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CongregationCountAggregateInputType = {
    idCongregation?: true
    name?: true
    language?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CongregationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Congregation to aggregate.
     */
    where?: CongregationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Congregations to fetch.
     */
    orderBy?: CongregationOrderByWithRelationInput | CongregationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CongregationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Congregations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Congregations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Congregations
    **/
    _count?: true | CongregationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CongregationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CongregationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CongregationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CongregationMaxAggregateInputType
  }

  export type GetCongregationAggregateType<T extends CongregationAggregateArgs> = {
        [P in keyof T & keyof AggregateCongregation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCongregation[P]>
      : GetScalarType<T[P], AggregateCongregation[P]>
  }




  export type CongregationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CongregationWhereInput
    orderBy?: CongregationOrderByWithAggregationInput | CongregationOrderByWithAggregationInput[]
    by: CongregationScalarFieldEnum[] | CongregationScalarFieldEnum
    having?: CongregationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CongregationCountAggregateInputType | true
    _avg?: CongregationAvgAggregateInputType
    _sum?: CongregationSumAggregateInputType
    _min?: CongregationMinAggregateInputType
    _max?: CongregationMaxAggregateInputType
  }

  export type CongregationGroupByOutputType = {
    idCongregation: number
    name: string | null
    language: string | null
    createdAt: Date
    updatedAt: Date | null
    _count: CongregationCountAggregateOutputType | null
    _avg: CongregationAvgAggregateOutputType | null
    _sum: CongregationSumAggregateOutputType | null
    _min: CongregationMinAggregateOutputType | null
    _max: CongregationMaxAggregateOutputType | null
  }

  type GetCongregationGroupByPayload<T extends CongregationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CongregationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CongregationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CongregationGroupByOutputType[P]>
            : GetScalarType<T[P], CongregationGroupByOutputType[P]>
        }
      >
    >


  export type CongregationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idCongregation?: boolean
    name?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Door?: boolean | Congregation$DoorArgs<ExtArgs>
    Language?: boolean | Congregation$LanguageArgs<ExtArgs>
    Login?: boolean | Congregation$LoginArgs<ExtArgs>
    Publisher?: boolean | Congregation$PublisherArgs<ExtArgs>
    Territory?: boolean | Congregation$TerritoryArgs<ExtArgs>
    _count?: boolean | CongregationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["congregation"]>



  export type CongregationSelectScalar = {
    idCongregation?: boolean
    name?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CongregationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idCongregation" | "name" | "language" | "createdAt" | "updatedAt", ExtArgs["result"]["congregation"]>
  export type CongregationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Door?: boolean | Congregation$DoorArgs<ExtArgs>
    Language?: boolean | Congregation$LanguageArgs<ExtArgs>
    Login?: boolean | Congregation$LoginArgs<ExtArgs>
    Publisher?: boolean | Congregation$PublisherArgs<ExtArgs>
    Territory?: boolean | Congregation$TerritoryArgs<ExtArgs>
    _count?: boolean | CongregationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CongregationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Congregation"
    objects: {
      Door: Prisma.$DoorPayload<ExtArgs>[]
      Language: Prisma.$LanguagePayload<ExtArgs>[]
      Login: Prisma.$LoginPayload<ExtArgs>[]
      Publisher: Prisma.$PublisherPayload<ExtArgs>[]
      Territory: Prisma.$TerritoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idCongregation: number
      name: string | null
      language: string | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["congregation"]>
    composites: {}
  }

  type CongregationGetPayload<S extends boolean | null | undefined | CongregationDefaultArgs> = $Result.GetResult<Prisma.$CongregationPayload, S>

  type CongregationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CongregationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CongregationCountAggregateInputType | true
    }

  export interface CongregationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Congregation'], meta: { name: 'Congregation' } }
    /**
     * Find zero or one Congregation that matches the filter.
     * @param {CongregationFindUniqueArgs} args - Arguments to find a Congregation
     * @example
     * // Get one Congregation
     * const congregation = await prisma.congregation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CongregationFindUniqueArgs>(args: SelectSubset<T, CongregationFindUniqueArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Congregation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CongregationFindUniqueOrThrowArgs} args - Arguments to find a Congregation
     * @example
     * // Get one Congregation
     * const congregation = await prisma.congregation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CongregationFindUniqueOrThrowArgs>(args: SelectSubset<T, CongregationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Congregation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CongregationFindFirstArgs} args - Arguments to find a Congregation
     * @example
     * // Get one Congregation
     * const congregation = await prisma.congregation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CongregationFindFirstArgs>(args?: SelectSubset<T, CongregationFindFirstArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Congregation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CongregationFindFirstOrThrowArgs} args - Arguments to find a Congregation
     * @example
     * // Get one Congregation
     * const congregation = await prisma.congregation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CongregationFindFirstOrThrowArgs>(args?: SelectSubset<T, CongregationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Congregations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CongregationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Congregations
     * const congregations = await prisma.congregation.findMany()
     * 
     * // Get first 10 Congregations
     * const congregations = await prisma.congregation.findMany({ take: 10 })
     * 
     * // Only select the `idCongregation`
     * const congregationWithIdCongregationOnly = await prisma.congregation.findMany({ select: { idCongregation: true } })
     * 
     */
    findMany<T extends CongregationFindManyArgs>(args?: SelectSubset<T, CongregationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Congregation.
     * @param {CongregationCreateArgs} args - Arguments to create a Congregation.
     * @example
     * // Create one Congregation
     * const Congregation = await prisma.congregation.create({
     *   data: {
     *     // ... data to create a Congregation
     *   }
     * })
     * 
     */
    create<T extends CongregationCreateArgs>(args: SelectSubset<T, CongregationCreateArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Congregations.
     * @param {CongregationCreateManyArgs} args - Arguments to create many Congregations.
     * @example
     * // Create many Congregations
     * const congregation = await prisma.congregation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CongregationCreateManyArgs>(args?: SelectSubset<T, CongregationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Congregation.
     * @param {CongregationDeleteArgs} args - Arguments to delete one Congregation.
     * @example
     * // Delete one Congregation
     * const Congregation = await prisma.congregation.delete({
     *   where: {
     *     // ... filter to delete one Congregation
     *   }
     * })
     * 
     */
    delete<T extends CongregationDeleteArgs>(args: SelectSubset<T, CongregationDeleteArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Congregation.
     * @param {CongregationUpdateArgs} args - Arguments to update one Congregation.
     * @example
     * // Update one Congregation
     * const congregation = await prisma.congregation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CongregationUpdateArgs>(args: SelectSubset<T, CongregationUpdateArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Congregations.
     * @param {CongregationDeleteManyArgs} args - Arguments to filter Congregations to delete.
     * @example
     * // Delete a few Congregations
     * const { count } = await prisma.congregation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CongregationDeleteManyArgs>(args?: SelectSubset<T, CongregationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Congregations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CongregationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Congregations
     * const congregation = await prisma.congregation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CongregationUpdateManyArgs>(args: SelectSubset<T, CongregationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Congregation.
     * @param {CongregationUpsertArgs} args - Arguments to update or create a Congregation.
     * @example
     * // Update or create a Congregation
     * const congregation = await prisma.congregation.upsert({
     *   create: {
     *     // ... data to create a Congregation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Congregation we want to update
     *   }
     * })
     */
    upsert<T extends CongregationUpsertArgs>(args: SelectSubset<T, CongregationUpsertArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Congregations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CongregationCountArgs} args - Arguments to filter Congregations to count.
     * @example
     * // Count the number of Congregations
     * const count = await prisma.congregation.count({
     *   where: {
     *     // ... the filter for the Congregations we want to count
     *   }
     * })
    **/
    count<T extends CongregationCountArgs>(
      args?: Subset<T, CongregationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CongregationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Congregation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CongregationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CongregationAggregateArgs>(args: Subset<T, CongregationAggregateArgs>): Prisma.PrismaPromise<GetCongregationAggregateType<T>>

    /**
     * Group by Congregation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CongregationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CongregationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CongregationGroupByArgs['orderBy'] }
        : { orderBy?: CongregationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CongregationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCongregationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Congregation model
   */
  readonly fields: CongregationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Congregation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CongregationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Door<T extends Congregation$DoorArgs<ExtArgs> = {}>(args?: Subset<T, Congregation$DoorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Language<T extends Congregation$LanguageArgs<ExtArgs> = {}>(args?: Subset<T, Congregation$LanguageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Login<T extends Congregation$LoginArgs<ExtArgs> = {}>(args?: Subset<T, Congregation$LoginArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Publisher<T extends Congregation$PublisherArgs<ExtArgs> = {}>(args?: Subset<T, Congregation$PublisherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublisherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Territory<T extends Congregation$TerritoryArgs<ExtArgs> = {}>(args?: Subset<T, Congregation$TerritoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Congregation model
   */
  interface CongregationFieldRefs {
    readonly idCongregation: FieldRef<"Congregation", 'Int'>
    readonly name: FieldRef<"Congregation", 'String'>
    readonly language: FieldRef<"Congregation", 'String'>
    readonly createdAt: FieldRef<"Congregation", 'DateTime'>
    readonly updatedAt: FieldRef<"Congregation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Congregation findUnique
   */
  export type CongregationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
    /**
     * Filter, which Congregation to fetch.
     */
    where: CongregationWhereUniqueInput
  }

  /**
   * Congregation findUniqueOrThrow
   */
  export type CongregationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
    /**
     * Filter, which Congregation to fetch.
     */
    where: CongregationWhereUniqueInput
  }

  /**
   * Congregation findFirst
   */
  export type CongregationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
    /**
     * Filter, which Congregation to fetch.
     */
    where?: CongregationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Congregations to fetch.
     */
    orderBy?: CongregationOrderByWithRelationInput | CongregationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Congregations.
     */
    cursor?: CongregationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Congregations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Congregations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Congregations.
     */
    distinct?: CongregationScalarFieldEnum | CongregationScalarFieldEnum[]
  }

  /**
   * Congregation findFirstOrThrow
   */
  export type CongregationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
    /**
     * Filter, which Congregation to fetch.
     */
    where?: CongregationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Congregations to fetch.
     */
    orderBy?: CongregationOrderByWithRelationInput | CongregationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Congregations.
     */
    cursor?: CongregationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Congregations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Congregations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Congregations.
     */
    distinct?: CongregationScalarFieldEnum | CongregationScalarFieldEnum[]
  }

  /**
   * Congregation findMany
   */
  export type CongregationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
    /**
     * Filter, which Congregations to fetch.
     */
    where?: CongregationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Congregations to fetch.
     */
    orderBy?: CongregationOrderByWithRelationInput | CongregationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Congregations.
     */
    cursor?: CongregationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Congregations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Congregations.
     */
    skip?: number
    distinct?: CongregationScalarFieldEnum | CongregationScalarFieldEnum[]
  }

  /**
   * Congregation create
   */
  export type CongregationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
    /**
     * The data needed to create a Congregation.
     */
    data: XOR<CongregationCreateInput, CongregationUncheckedCreateInput>
  }

  /**
   * Congregation createMany
   */
  export type CongregationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Congregations.
     */
    data: CongregationCreateManyInput | CongregationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Congregation update
   */
  export type CongregationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
    /**
     * The data needed to update a Congregation.
     */
    data: XOR<CongregationUpdateInput, CongregationUncheckedUpdateInput>
    /**
     * Choose, which Congregation to update.
     */
    where: CongregationWhereUniqueInput
  }

  /**
   * Congregation updateMany
   */
  export type CongregationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Congregations.
     */
    data: XOR<CongregationUpdateManyMutationInput, CongregationUncheckedUpdateManyInput>
    /**
     * Filter which Congregations to update
     */
    where?: CongregationWhereInput
    /**
     * Limit how many Congregations to update.
     */
    limit?: number
  }

  /**
   * Congregation upsert
   */
  export type CongregationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
    /**
     * The filter to search for the Congregation to update in case it exists.
     */
    where: CongregationWhereUniqueInput
    /**
     * In case the Congregation found by the `where` argument doesn't exist, create a new Congregation with this data.
     */
    create: XOR<CongregationCreateInput, CongregationUncheckedCreateInput>
    /**
     * In case the Congregation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CongregationUpdateInput, CongregationUncheckedUpdateInput>
  }

  /**
   * Congregation delete
   */
  export type CongregationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
    /**
     * Filter which Congregation to delete.
     */
    where: CongregationWhereUniqueInput
  }

  /**
   * Congregation deleteMany
   */
  export type CongregationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Congregations to delete
     */
    where?: CongregationWhereInput
    /**
     * Limit how many Congregations to delete.
     */
    limit?: number
  }

  /**
   * Congregation.Door
   */
  export type Congregation$DoorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    where?: DoorWhereInput
    orderBy?: DoorOrderByWithRelationInput | DoorOrderByWithRelationInput[]
    cursor?: DoorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoorScalarFieldEnum | DoorScalarFieldEnum[]
  }

  /**
   * Congregation.Language
   */
  export type Congregation$LanguageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    where?: LanguageWhereInput
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    cursor?: LanguageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * Congregation.Login
   */
  export type Congregation$LoginArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Login
     */
    omit?: LoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginInclude<ExtArgs> | null
    where?: LoginWhereInput
    orderBy?: LoginOrderByWithRelationInput | LoginOrderByWithRelationInput[]
    cursor?: LoginWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoginScalarFieldEnum | LoginScalarFieldEnum[]
  }

  /**
   * Congregation.Publisher
   */
  export type Congregation$PublisherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publisher
     */
    select?: PublisherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Publisher
     */
    omit?: PublisherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublisherInclude<ExtArgs> | null
    where?: PublisherWhereInput
    orderBy?: PublisherOrderByWithRelationInput | PublisherOrderByWithRelationInput[]
    cursor?: PublisherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublisherScalarFieldEnum | PublisherScalarFieldEnum[]
  }

  /**
   * Congregation.Territory
   */
  export type Congregation$TerritoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    where?: TerritoryWhereInput
    orderBy?: TerritoryOrderByWithRelationInput | TerritoryOrderByWithRelationInput[]
    cursor?: TerritoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TerritoryScalarFieldEnum | TerritoryScalarFieldEnum[]
  }

  /**
   * Congregation without action
   */
  export type CongregationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
  }


  /**
   * Model Door
   */

  export type AggregateDoor = {
    _count: DoorCountAggregateOutputType | null
    _avg: DoorAvgAggregateOutputType | null
    _sum: DoorSumAggregateOutputType | null
    _min: DoorMinAggregateOutputType | null
    _max: DoorMaxAggregateOutputType | null
  }

  export type DoorAvgAggregateOutputType = {
    idDoor: number | null
    building_id: number | null
    id_cong_app: number | null
    id_cong_lang: number | null
  }

  export type DoorSumAggregateOutputType = {
    idDoor: number | null
    building_id: number | null
    id_cong_app: number | null
    id_cong_lang: number | null
  }

  export type DoorMinAggregateOutputType = {
    idDoor: number | null
    language: string | null
    information_name: string | null
    building_id: number | null
    id_cong_app: number | null
    id_cong_lang: number | null
    lastModified: Date | null
    updatedAt: Date | null
  }

  export type DoorMaxAggregateOutputType = {
    idDoor: number | null
    language: string | null
    information_name: string | null
    building_id: number | null
    id_cong_app: number | null
    id_cong_lang: number | null
    lastModified: Date | null
    updatedAt: Date | null
  }

  export type DoorCountAggregateOutputType = {
    idDoor: number
    language: number
    information_name: number
    building_id: number
    id_cong_app: number
    id_cong_lang: number
    lastModified: number
    updatedAt: number
    _all: number
  }


  export type DoorAvgAggregateInputType = {
    idDoor?: true
    building_id?: true
    id_cong_app?: true
    id_cong_lang?: true
  }

  export type DoorSumAggregateInputType = {
    idDoor?: true
    building_id?: true
    id_cong_app?: true
    id_cong_lang?: true
  }

  export type DoorMinAggregateInputType = {
    idDoor?: true
    language?: true
    information_name?: true
    building_id?: true
    id_cong_app?: true
    id_cong_lang?: true
    lastModified?: true
    updatedAt?: true
  }

  export type DoorMaxAggregateInputType = {
    idDoor?: true
    language?: true
    information_name?: true
    building_id?: true
    id_cong_app?: true
    id_cong_lang?: true
    lastModified?: true
    updatedAt?: true
  }

  export type DoorCountAggregateInputType = {
    idDoor?: true
    language?: true
    information_name?: true
    building_id?: true
    id_cong_app?: true
    id_cong_lang?: true
    lastModified?: true
    updatedAt?: true
    _all?: true
  }

  export type DoorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Door to aggregate.
     */
    where?: DoorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doors to fetch.
     */
    orderBy?: DoorOrderByWithRelationInput | DoorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doors
    **/
    _count?: true | DoorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoorMaxAggregateInputType
  }

  export type GetDoorAggregateType<T extends DoorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoor[P]>
      : GetScalarType<T[P], AggregateDoor[P]>
  }




  export type DoorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoorWhereInput
    orderBy?: DoorOrderByWithAggregationInput | DoorOrderByWithAggregationInput[]
    by: DoorScalarFieldEnum[] | DoorScalarFieldEnum
    having?: DoorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoorCountAggregateInputType | true
    _avg?: DoorAvgAggregateInputType
    _sum?: DoorSumAggregateInputType
    _min?: DoorMinAggregateInputType
    _max?: DoorMaxAggregateInputType
  }

  export type DoorGroupByOutputType = {
    idDoor: number
    language: string | null
    information_name: string | null
    building_id: number | null
    id_cong_app: number
    id_cong_lang: number
    lastModified: Date | null
    updatedAt: Date | null
    _count: DoorCountAggregateOutputType | null
    _avg: DoorAvgAggregateOutputType | null
    _sum: DoorSumAggregateOutputType | null
    _min: DoorMinAggregateOutputType | null
    _max: DoorMaxAggregateOutputType | null
  }

  type GetDoorGroupByPayload<T extends DoorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoorGroupByOutputType[P]>
            : GetScalarType<T[P], DoorGroupByOutputType[P]>
        }
      >
    >


  export type DoorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idDoor?: boolean
    language?: boolean
    information_name?: boolean
    building_id?: boolean
    id_cong_app?: boolean
    id_cong_lang?: boolean
    lastModified?: boolean
    updatedAt?: boolean
    Building?: boolean | Door$BuildingArgs<ExtArgs>
    Congregation?: boolean | CongregationDefaultArgs<ExtArgs>
    Language?: boolean | LanguageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["door"]>



  export type DoorSelectScalar = {
    idDoor?: boolean
    language?: boolean
    information_name?: boolean
    building_id?: boolean
    id_cong_app?: boolean
    id_cong_lang?: boolean
    lastModified?: boolean
    updatedAt?: boolean
  }

  export type DoorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idDoor" | "language" | "information_name" | "building_id" | "id_cong_app" | "id_cong_lang" | "lastModified" | "updatedAt", ExtArgs["result"]["door"]>
  export type DoorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Building?: boolean | Door$BuildingArgs<ExtArgs>
    Congregation?: boolean | CongregationDefaultArgs<ExtArgs>
    Language?: boolean | LanguageDefaultArgs<ExtArgs>
  }

  export type $DoorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Door"
    objects: {
      Building: Prisma.$BuildingPayload<ExtArgs> | null
      Congregation: Prisma.$CongregationPayload<ExtArgs>
      Language: Prisma.$LanguagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idDoor: number
      language: string | null
      information_name: string | null
      building_id: number | null
      id_cong_app: number
      id_cong_lang: number
      lastModified: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["door"]>
    composites: {}
  }

  type DoorGetPayload<S extends boolean | null | undefined | DoorDefaultArgs> = $Result.GetResult<Prisma.$DoorPayload, S>

  type DoorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoorCountAggregateInputType | true
    }

  export interface DoorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Door'], meta: { name: 'Door' } }
    /**
     * Find zero or one Door that matches the filter.
     * @param {DoorFindUniqueArgs} args - Arguments to find a Door
     * @example
     * // Get one Door
     * const door = await prisma.door.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoorFindUniqueArgs>(args: SelectSubset<T, DoorFindUniqueArgs<ExtArgs>>): Prisma__DoorClient<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Door that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoorFindUniqueOrThrowArgs} args - Arguments to find a Door
     * @example
     * // Get one Door
     * const door = await prisma.door.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoorFindUniqueOrThrowArgs>(args: SelectSubset<T, DoorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoorClient<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Door that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoorFindFirstArgs} args - Arguments to find a Door
     * @example
     * // Get one Door
     * const door = await prisma.door.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoorFindFirstArgs>(args?: SelectSubset<T, DoorFindFirstArgs<ExtArgs>>): Prisma__DoorClient<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Door that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoorFindFirstOrThrowArgs} args - Arguments to find a Door
     * @example
     * // Get one Door
     * const door = await prisma.door.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoorFindFirstOrThrowArgs>(args?: SelectSubset<T, DoorFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoorClient<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Doors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doors
     * const doors = await prisma.door.findMany()
     * 
     * // Get first 10 Doors
     * const doors = await prisma.door.findMany({ take: 10 })
     * 
     * // Only select the `idDoor`
     * const doorWithIdDoorOnly = await prisma.door.findMany({ select: { idDoor: true } })
     * 
     */
    findMany<T extends DoorFindManyArgs>(args?: SelectSubset<T, DoorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Door.
     * @param {DoorCreateArgs} args - Arguments to create a Door.
     * @example
     * // Create one Door
     * const Door = await prisma.door.create({
     *   data: {
     *     // ... data to create a Door
     *   }
     * })
     * 
     */
    create<T extends DoorCreateArgs>(args: SelectSubset<T, DoorCreateArgs<ExtArgs>>): Prisma__DoorClient<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Doors.
     * @param {DoorCreateManyArgs} args - Arguments to create many Doors.
     * @example
     * // Create many Doors
     * const door = await prisma.door.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoorCreateManyArgs>(args?: SelectSubset<T, DoorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Door.
     * @param {DoorDeleteArgs} args - Arguments to delete one Door.
     * @example
     * // Delete one Door
     * const Door = await prisma.door.delete({
     *   where: {
     *     // ... filter to delete one Door
     *   }
     * })
     * 
     */
    delete<T extends DoorDeleteArgs>(args: SelectSubset<T, DoorDeleteArgs<ExtArgs>>): Prisma__DoorClient<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Door.
     * @param {DoorUpdateArgs} args - Arguments to update one Door.
     * @example
     * // Update one Door
     * const door = await prisma.door.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoorUpdateArgs>(args: SelectSubset<T, DoorUpdateArgs<ExtArgs>>): Prisma__DoorClient<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Doors.
     * @param {DoorDeleteManyArgs} args - Arguments to filter Doors to delete.
     * @example
     * // Delete a few Doors
     * const { count } = await prisma.door.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoorDeleteManyArgs>(args?: SelectSubset<T, DoorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doors
     * const door = await prisma.door.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoorUpdateManyArgs>(args: SelectSubset<T, DoorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Door.
     * @param {DoorUpsertArgs} args - Arguments to update or create a Door.
     * @example
     * // Update or create a Door
     * const door = await prisma.door.upsert({
     *   create: {
     *     // ... data to create a Door
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Door we want to update
     *   }
     * })
     */
    upsert<T extends DoorUpsertArgs>(args: SelectSubset<T, DoorUpsertArgs<ExtArgs>>): Prisma__DoorClient<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Doors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoorCountArgs} args - Arguments to filter Doors to count.
     * @example
     * // Count the number of Doors
     * const count = await prisma.door.count({
     *   where: {
     *     // ... the filter for the Doors we want to count
     *   }
     * })
    **/
    count<T extends DoorCountArgs>(
      args?: Subset<T, DoorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Door.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoorAggregateArgs>(args: Subset<T, DoorAggregateArgs>): Prisma.PrismaPromise<GetDoorAggregateType<T>>

    /**
     * Group by Door.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoorGroupByArgs['orderBy'] }
        : { orderBy?: DoorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Door model
   */
  readonly fields: DoorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Door.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Building<T extends Door$BuildingArgs<ExtArgs> = {}>(args?: Subset<T, Door$BuildingArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Congregation<T extends CongregationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CongregationDefaultArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Language<T extends LanguageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LanguageDefaultArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Door model
   */
  interface DoorFieldRefs {
    readonly idDoor: FieldRef<"Door", 'Int'>
    readonly language: FieldRef<"Door", 'String'>
    readonly information_name: FieldRef<"Door", 'String'>
    readonly building_id: FieldRef<"Door", 'Int'>
    readonly id_cong_app: FieldRef<"Door", 'Int'>
    readonly id_cong_lang: FieldRef<"Door", 'Int'>
    readonly lastModified: FieldRef<"Door", 'DateTime'>
    readonly updatedAt: FieldRef<"Door", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Door findUnique
   */
  export type DoorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    /**
     * Filter, which Door to fetch.
     */
    where: DoorWhereUniqueInput
  }

  /**
   * Door findUniqueOrThrow
   */
  export type DoorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    /**
     * Filter, which Door to fetch.
     */
    where: DoorWhereUniqueInput
  }

  /**
   * Door findFirst
   */
  export type DoorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    /**
     * Filter, which Door to fetch.
     */
    where?: DoorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doors to fetch.
     */
    orderBy?: DoorOrderByWithRelationInput | DoorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doors.
     */
    cursor?: DoorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doors.
     */
    distinct?: DoorScalarFieldEnum | DoorScalarFieldEnum[]
  }

  /**
   * Door findFirstOrThrow
   */
  export type DoorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    /**
     * Filter, which Door to fetch.
     */
    where?: DoorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doors to fetch.
     */
    orderBy?: DoorOrderByWithRelationInput | DoorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doors.
     */
    cursor?: DoorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doors.
     */
    distinct?: DoorScalarFieldEnum | DoorScalarFieldEnum[]
  }

  /**
   * Door findMany
   */
  export type DoorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    /**
     * Filter, which Doors to fetch.
     */
    where?: DoorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doors to fetch.
     */
    orderBy?: DoorOrderByWithRelationInput | DoorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doors.
     */
    cursor?: DoorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doors.
     */
    skip?: number
    distinct?: DoorScalarFieldEnum | DoorScalarFieldEnum[]
  }

  /**
   * Door create
   */
  export type DoorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    /**
     * The data needed to create a Door.
     */
    data: XOR<DoorCreateInput, DoorUncheckedCreateInput>
  }

  /**
   * Door createMany
   */
  export type DoorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doors.
     */
    data: DoorCreateManyInput | DoorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Door update
   */
  export type DoorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    /**
     * The data needed to update a Door.
     */
    data: XOR<DoorUpdateInput, DoorUncheckedUpdateInput>
    /**
     * Choose, which Door to update.
     */
    where: DoorWhereUniqueInput
  }

  /**
   * Door updateMany
   */
  export type DoorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doors.
     */
    data: XOR<DoorUpdateManyMutationInput, DoorUncheckedUpdateManyInput>
    /**
     * Filter which Doors to update
     */
    where?: DoorWhereInput
    /**
     * Limit how many Doors to update.
     */
    limit?: number
  }

  /**
   * Door upsert
   */
  export type DoorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    /**
     * The filter to search for the Door to update in case it exists.
     */
    where: DoorWhereUniqueInput
    /**
     * In case the Door found by the `where` argument doesn't exist, create a new Door with this data.
     */
    create: XOR<DoorCreateInput, DoorUncheckedCreateInput>
    /**
     * In case the Door was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoorUpdateInput, DoorUncheckedUpdateInput>
  }

  /**
   * Door delete
   */
  export type DoorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    /**
     * Filter which Door to delete.
     */
    where: DoorWhereUniqueInput
  }

  /**
   * Door deleteMany
   */
  export type DoorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doors to delete
     */
    where?: DoorWhereInput
    /**
     * Limit how many Doors to delete.
     */
    limit?: number
  }

  /**
   * Door.Building
   */
  export type Door$BuildingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    where?: BuildingWhereInput
  }

  /**
   * Door without action
   */
  export type DoorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
  }


  /**
   * Model Language
   */

  export type AggregateLanguage = {
    _count: LanguageCountAggregateOutputType | null
    _avg: LanguageAvgAggregateOutputType | null
    _sum: LanguageSumAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  export type LanguageAvgAggregateOutputType = {
    idLanguage: number | null
    id_cong_app: number | null
    id_cong_lang: number | null
    Color: number | null
  }

  export type LanguageSumAggregateOutputType = {
    idLanguage: number | null
    id_cong_app: number | null
    id_cong_lang: number | null
    Color: number | null
  }

  export type LanguageMinAggregateOutputType = {
    idLanguage: number | null
    id_cong_app: number | null
    id_cong_lang: number | null
    name: string | null
    Color: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LanguageMaxAggregateOutputType = {
    idLanguage: number | null
    id_cong_app: number | null
    id_cong_lang: number | null
    name: string | null
    Color: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LanguageCountAggregateOutputType = {
    idLanguage: number
    id_cong_app: number
    id_cong_lang: number
    name: number
    Color: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LanguageAvgAggregateInputType = {
    idLanguage?: true
    id_cong_app?: true
    id_cong_lang?: true
    Color?: true
  }

  export type LanguageSumAggregateInputType = {
    idLanguage?: true
    id_cong_app?: true
    id_cong_lang?: true
    Color?: true
  }

  export type LanguageMinAggregateInputType = {
    idLanguage?: true
    id_cong_app?: true
    id_cong_lang?: true
    name?: true
    Color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LanguageMaxAggregateInputType = {
    idLanguage?: true
    id_cong_app?: true
    id_cong_lang?: true
    name?: true
    Color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LanguageCountAggregateInputType = {
    idLanguage?: true
    id_cong_app?: true
    id_cong_lang?: true
    name?: true
    Color?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LanguageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Language to aggregate.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Languages
    **/
    _count?: true | LanguageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LanguageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LanguageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageMaxAggregateInputType
  }

  export type GetLanguageAggregateType<T extends LanguageAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguage[P]>
      : GetScalarType<T[P], AggregateLanguage[P]>
  }




  export type LanguageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageWhereInput
    orderBy?: LanguageOrderByWithAggregationInput | LanguageOrderByWithAggregationInput[]
    by: LanguageScalarFieldEnum[] | LanguageScalarFieldEnum
    having?: LanguageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageCountAggregateInputType | true
    _avg?: LanguageAvgAggregateInputType
    _sum?: LanguageSumAggregateInputType
    _min?: LanguageMinAggregateInputType
    _max?: LanguageMaxAggregateInputType
  }

  export type LanguageGroupByOutputType = {
    idLanguage: number
    id_cong_app: number
    id_cong_lang: number
    name: string
    Color: number | null
    createdAt: Date
    updatedAt: Date | null
    _count: LanguageCountAggregateOutputType | null
    _avg: LanguageAvgAggregateOutputType | null
    _sum: LanguageSumAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  type GetLanguageGroupByPayload<T extends LanguageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageGroupByOutputType[P]>
        }
      >
    >


  export type LanguageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idLanguage?: boolean
    id_cong_app?: boolean
    id_cong_lang?: boolean
    name?: boolean
    Color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Door?: boolean | Language$DoorArgs<ExtArgs>
    Congregation?: boolean | CongregationDefaultArgs<ExtArgs>
    _count?: boolean | LanguageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["language"]>



  export type LanguageSelectScalar = {
    idLanguage?: boolean
    id_cong_app?: boolean
    id_cong_lang?: boolean
    name?: boolean
    Color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LanguageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idLanguage" | "id_cong_app" | "id_cong_lang" | "name" | "Color" | "createdAt" | "updatedAt", ExtArgs["result"]["language"]>
  export type LanguageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Door?: boolean | Language$DoorArgs<ExtArgs>
    Congregation?: boolean | CongregationDefaultArgs<ExtArgs>
    _count?: boolean | LanguageCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LanguagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Language"
    objects: {
      Door: Prisma.$DoorPayload<ExtArgs>[]
      Congregation: Prisma.$CongregationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idLanguage: number
      id_cong_app: number
      id_cong_lang: number
      name: string
      Color: number | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["language"]>
    composites: {}
  }

  type LanguageGetPayload<S extends boolean | null | undefined | LanguageDefaultArgs> = $Result.GetResult<Prisma.$LanguagePayload, S>

  type LanguageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LanguageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LanguageCountAggregateInputType | true
    }

  export interface LanguageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Language'], meta: { name: 'Language' } }
    /**
     * Find zero or one Language that matches the filter.
     * @param {LanguageFindUniqueArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LanguageFindUniqueArgs>(args: SelectSubset<T, LanguageFindUniqueArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Language that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LanguageFindUniqueOrThrowArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LanguageFindUniqueOrThrowArgs>(args: SelectSubset<T, LanguageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Language that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindFirstArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LanguageFindFirstArgs>(args?: SelectSubset<T, LanguageFindFirstArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Language that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindFirstOrThrowArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LanguageFindFirstOrThrowArgs>(args?: SelectSubset<T, LanguageFindFirstOrThrowArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Languages
     * const languages = await prisma.language.findMany()
     * 
     * // Get first 10 Languages
     * const languages = await prisma.language.findMany({ take: 10 })
     * 
     * // Only select the `idLanguage`
     * const languageWithIdLanguageOnly = await prisma.language.findMany({ select: { idLanguage: true } })
     * 
     */
    findMany<T extends LanguageFindManyArgs>(args?: SelectSubset<T, LanguageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Language.
     * @param {LanguageCreateArgs} args - Arguments to create a Language.
     * @example
     * // Create one Language
     * const Language = await prisma.language.create({
     *   data: {
     *     // ... data to create a Language
     *   }
     * })
     * 
     */
    create<T extends LanguageCreateArgs>(args: SelectSubset<T, LanguageCreateArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Languages.
     * @param {LanguageCreateManyArgs} args - Arguments to create many Languages.
     * @example
     * // Create many Languages
     * const language = await prisma.language.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LanguageCreateManyArgs>(args?: SelectSubset<T, LanguageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Language.
     * @param {LanguageDeleteArgs} args - Arguments to delete one Language.
     * @example
     * // Delete one Language
     * const Language = await prisma.language.delete({
     *   where: {
     *     // ... filter to delete one Language
     *   }
     * })
     * 
     */
    delete<T extends LanguageDeleteArgs>(args: SelectSubset<T, LanguageDeleteArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Language.
     * @param {LanguageUpdateArgs} args - Arguments to update one Language.
     * @example
     * // Update one Language
     * const language = await prisma.language.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LanguageUpdateArgs>(args: SelectSubset<T, LanguageUpdateArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Languages.
     * @param {LanguageDeleteManyArgs} args - Arguments to filter Languages to delete.
     * @example
     * // Delete a few Languages
     * const { count } = await prisma.language.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LanguageDeleteManyArgs>(args?: SelectSubset<T, LanguageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Languages
     * const language = await prisma.language.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LanguageUpdateManyArgs>(args: SelectSubset<T, LanguageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Language.
     * @param {LanguageUpsertArgs} args - Arguments to update or create a Language.
     * @example
     * // Update or create a Language
     * const language = await prisma.language.upsert({
     *   create: {
     *     // ... data to create a Language
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Language we want to update
     *   }
     * })
     */
    upsert<T extends LanguageUpsertArgs>(args: SelectSubset<T, LanguageUpsertArgs<ExtArgs>>): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageCountArgs} args - Arguments to filter Languages to count.
     * @example
     * // Count the number of Languages
     * const count = await prisma.language.count({
     *   where: {
     *     // ... the filter for the Languages we want to count
     *   }
     * })
    **/
    count<T extends LanguageCountArgs>(
      args?: Subset<T, LanguageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageAggregateArgs>(args: Subset<T, LanguageAggregateArgs>): Prisma.PrismaPromise<GetLanguageAggregateType<T>>

    /**
     * Group by Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageGroupByArgs['orderBy'] }
        : { orderBy?: LanguageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Language model
   */
  readonly fields: LanguageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Language.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Door<T extends Language$DoorArgs<ExtArgs> = {}>(args?: Subset<T, Language$DoorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Congregation<T extends CongregationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CongregationDefaultArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Language model
   */
  interface LanguageFieldRefs {
    readonly idLanguage: FieldRef<"Language", 'Int'>
    readonly id_cong_app: FieldRef<"Language", 'Int'>
    readonly id_cong_lang: FieldRef<"Language", 'Int'>
    readonly name: FieldRef<"Language", 'String'>
    readonly Color: FieldRef<"Language", 'Int'>
    readonly createdAt: FieldRef<"Language", 'DateTime'>
    readonly updatedAt: FieldRef<"Language", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Language findUnique
   */
  export type LanguageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language findUniqueOrThrow
   */
  export type LanguageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language findFirst
   */
  export type LanguageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * Language findFirstOrThrow
   */
  export type LanguageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * Language findMany
   */
  export type LanguageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationInput | LanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * Language create
   */
  export type LanguageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * The data needed to create a Language.
     */
    data: XOR<LanguageCreateInput, LanguageUncheckedCreateInput>
  }

  /**
   * Language createMany
   */
  export type LanguageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Languages.
     */
    data: LanguageCreateManyInput | LanguageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Language update
   */
  export type LanguageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * The data needed to update a Language.
     */
    data: XOR<LanguageUpdateInput, LanguageUncheckedUpdateInput>
    /**
     * Choose, which Language to update.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language updateMany
   */
  export type LanguageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Languages.
     */
    data: XOR<LanguageUpdateManyMutationInput, LanguageUncheckedUpdateManyInput>
    /**
     * Filter which Languages to update
     */
    where?: LanguageWhereInput
    /**
     * Limit how many Languages to update.
     */
    limit?: number
  }

  /**
   * Language upsert
   */
  export type LanguageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * The filter to search for the Language to update in case it exists.
     */
    where: LanguageWhereUniqueInput
    /**
     * In case the Language found by the `where` argument doesn't exist, create a new Language with this data.
     */
    create: XOR<LanguageCreateInput, LanguageUncheckedCreateInput>
    /**
     * In case the Language was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguageUpdateInput, LanguageUncheckedUpdateInput>
  }

  /**
   * Language delete
   */
  export type LanguageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter which Language to delete.
     */
    where: LanguageWhereUniqueInput
  }

  /**
   * Language deleteMany
   */
  export type LanguageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Languages to delete
     */
    where?: LanguageWhereInput
    /**
     * Limit how many Languages to delete.
     */
    limit?: number
  }

  /**
   * Language.Door
   */
  export type Language$DoorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Door
     */
    select?: DoorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Door
     */
    omit?: DoorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoorInclude<ExtArgs> | null
    where?: DoorWhereInput
    orderBy?: DoorOrderByWithRelationInput | DoorOrderByWithRelationInput[]
    cursor?: DoorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoorScalarFieldEnum | DoorScalarFieldEnum[]
  }

  /**
   * Language without action
   */
  export type LanguageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Language
     */
    omit?: LanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageInclude<ExtArgs> | null
  }


  /**
   * Model Publisher
   */

  export type AggregatePublisher = {
    _count: PublisherCountAggregateOutputType | null
    _avg: PublisherAvgAggregateOutputType | null
    _sum: PublisherSumAggregateOutputType | null
    _min: PublisherMinAggregateOutputType | null
    _max: PublisherMaxAggregateOutputType | null
  }

  export type PublisherAvgAggregateOutputType = {
    idPublisher: number | null
    congregation_id: number | null
  }

  export type PublisherSumAggregateOutputType = {
    idPublisher: number | null
    congregation_id: number | null
  }

  export type PublisherMinAggregateOutputType = {
    idPublisher: number | null
    name: string | null
    congregation_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PublisherMaxAggregateOutputType = {
    idPublisher: number | null
    name: string | null
    congregation_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PublisherCountAggregateOutputType = {
    idPublisher: number
    name: number
    congregation_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PublisherAvgAggregateInputType = {
    idPublisher?: true
    congregation_id?: true
  }

  export type PublisherSumAggregateInputType = {
    idPublisher?: true
    congregation_id?: true
  }

  export type PublisherMinAggregateInputType = {
    idPublisher?: true
    name?: true
    congregation_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PublisherMaxAggregateInputType = {
    idPublisher?: true
    name?: true
    congregation_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PublisherCountAggregateInputType = {
    idPublisher?: true
    name?: true
    congregation_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PublisherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Publisher to aggregate.
     */
    where?: PublisherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publishers to fetch.
     */
    orderBy?: PublisherOrderByWithRelationInput | PublisherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PublisherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publishers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publishers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Publishers
    **/
    _count?: true | PublisherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PublisherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PublisherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublisherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublisherMaxAggregateInputType
  }

  export type GetPublisherAggregateType<T extends PublisherAggregateArgs> = {
        [P in keyof T & keyof AggregatePublisher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublisher[P]>
      : GetScalarType<T[P], AggregatePublisher[P]>
  }




  export type PublisherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublisherWhereInput
    orderBy?: PublisherOrderByWithAggregationInput | PublisherOrderByWithAggregationInput[]
    by: PublisherScalarFieldEnum[] | PublisherScalarFieldEnum
    having?: PublisherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublisherCountAggregateInputType | true
    _avg?: PublisherAvgAggregateInputType
    _sum?: PublisherSumAggregateInputType
    _min?: PublisherMinAggregateInputType
    _max?: PublisherMaxAggregateInputType
  }

  export type PublisherGroupByOutputType = {
    idPublisher: number
    name: string | null
    congregation_id: number | null
    createdAt: Date
    updatedAt: Date | null
    _count: PublisherCountAggregateOutputType | null
    _avg: PublisherAvgAggregateOutputType | null
    _sum: PublisherSumAggregateOutputType | null
    _min: PublisherMinAggregateOutputType | null
    _max: PublisherMaxAggregateOutputType | null
  }

  type GetPublisherGroupByPayload<T extends PublisherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublisherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublisherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublisherGroupByOutputType[P]>
            : GetScalarType<T[P], PublisherGroupByOutputType[P]>
        }
      >
    >


  export type PublisherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idPublisher?: boolean
    name?: boolean
    congregation_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Congregation?: boolean | Publisher$CongregationArgs<ExtArgs>
  }, ExtArgs["result"]["publisher"]>



  export type PublisherSelectScalar = {
    idPublisher?: boolean
    name?: boolean
    congregation_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PublisherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idPublisher" | "name" | "congregation_id" | "createdAt" | "updatedAt", ExtArgs["result"]["publisher"]>
  export type PublisherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Congregation?: boolean | Publisher$CongregationArgs<ExtArgs>
  }

  export type $PublisherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Publisher"
    objects: {
      Congregation: Prisma.$CongregationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      idPublisher: number
      name: string | null
      congregation_id: number | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["publisher"]>
    composites: {}
  }

  type PublisherGetPayload<S extends boolean | null | undefined | PublisherDefaultArgs> = $Result.GetResult<Prisma.$PublisherPayload, S>

  type PublisherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PublisherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PublisherCountAggregateInputType | true
    }

  export interface PublisherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Publisher'], meta: { name: 'Publisher' } }
    /**
     * Find zero or one Publisher that matches the filter.
     * @param {PublisherFindUniqueArgs} args - Arguments to find a Publisher
     * @example
     * // Get one Publisher
     * const publisher = await prisma.publisher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PublisherFindUniqueArgs>(args: SelectSubset<T, PublisherFindUniqueArgs<ExtArgs>>): Prisma__PublisherClient<$Result.GetResult<Prisma.$PublisherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Publisher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PublisherFindUniqueOrThrowArgs} args - Arguments to find a Publisher
     * @example
     * // Get one Publisher
     * const publisher = await prisma.publisher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PublisherFindUniqueOrThrowArgs>(args: SelectSubset<T, PublisherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PublisherClient<$Result.GetResult<Prisma.$PublisherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Publisher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublisherFindFirstArgs} args - Arguments to find a Publisher
     * @example
     * // Get one Publisher
     * const publisher = await prisma.publisher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PublisherFindFirstArgs>(args?: SelectSubset<T, PublisherFindFirstArgs<ExtArgs>>): Prisma__PublisherClient<$Result.GetResult<Prisma.$PublisherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Publisher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublisherFindFirstOrThrowArgs} args - Arguments to find a Publisher
     * @example
     * // Get one Publisher
     * const publisher = await prisma.publisher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PublisherFindFirstOrThrowArgs>(args?: SelectSubset<T, PublisherFindFirstOrThrowArgs<ExtArgs>>): Prisma__PublisherClient<$Result.GetResult<Prisma.$PublisherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Publishers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublisherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Publishers
     * const publishers = await prisma.publisher.findMany()
     * 
     * // Get first 10 Publishers
     * const publishers = await prisma.publisher.findMany({ take: 10 })
     * 
     * // Only select the `idPublisher`
     * const publisherWithIdPublisherOnly = await prisma.publisher.findMany({ select: { idPublisher: true } })
     * 
     */
    findMany<T extends PublisherFindManyArgs>(args?: SelectSubset<T, PublisherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublisherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Publisher.
     * @param {PublisherCreateArgs} args - Arguments to create a Publisher.
     * @example
     * // Create one Publisher
     * const Publisher = await prisma.publisher.create({
     *   data: {
     *     // ... data to create a Publisher
     *   }
     * })
     * 
     */
    create<T extends PublisherCreateArgs>(args: SelectSubset<T, PublisherCreateArgs<ExtArgs>>): Prisma__PublisherClient<$Result.GetResult<Prisma.$PublisherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Publishers.
     * @param {PublisherCreateManyArgs} args - Arguments to create many Publishers.
     * @example
     * // Create many Publishers
     * const publisher = await prisma.publisher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PublisherCreateManyArgs>(args?: SelectSubset<T, PublisherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Publisher.
     * @param {PublisherDeleteArgs} args - Arguments to delete one Publisher.
     * @example
     * // Delete one Publisher
     * const Publisher = await prisma.publisher.delete({
     *   where: {
     *     // ... filter to delete one Publisher
     *   }
     * })
     * 
     */
    delete<T extends PublisherDeleteArgs>(args: SelectSubset<T, PublisherDeleteArgs<ExtArgs>>): Prisma__PublisherClient<$Result.GetResult<Prisma.$PublisherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Publisher.
     * @param {PublisherUpdateArgs} args - Arguments to update one Publisher.
     * @example
     * // Update one Publisher
     * const publisher = await prisma.publisher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PublisherUpdateArgs>(args: SelectSubset<T, PublisherUpdateArgs<ExtArgs>>): Prisma__PublisherClient<$Result.GetResult<Prisma.$PublisherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Publishers.
     * @param {PublisherDeleteManyArgs} args - Arguments to filter Publishers to delete.
     * @example
     * // Delete a few Publishers
     * const { count } = await prisma.publisher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PublisherDeleteManyArgs>(args?: SelectSubset<T, PublisherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Publishers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublisherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Publishers
     * const publisher = await prisma.publisher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PublisherUpdateManyArgs>(args: SelectSubset<T, PublisherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Publisher.
     * @param {PublisherUpsertArgs} args - Arguments to update or create a Publisher.
     * @example
     * // Update or create a Publisher
     * const publisher = await prisma.publisher.upsert({
     *   create: {
     *     // ... data to create a Publisher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Publisher we want to update
     *   }
     * })
     */
    upsert<T extends PublisherUpsertArgs>(args: SelectSubset<T, PublisherUpsertArgs<ExtArgs>>): Prisma__PublisherClient<$Result.GetResult<Prisma.$PublisherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Publishers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublisherCountArgs} args - Arguments to filter Publishers to count.
     * @example
     * // Count the number of Publishers
     * const count = await prisma.publisher.count({
     *   where: {
     *     // ... the filter for the Publishers we want to count
     *   }
     * })
    **/
    count<T extends PublisherCountArgs>(
      args?: Subset<T, PublisherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublisherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Publisher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublisherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublisherAggregateArgs>(args: Subset<T, PublisherAggregateArgs>): Prisma.PrismaPromise<GetPublisherAggregateType<T>>

    /**
     * Group by Publisher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublisherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublisherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublisherGroupByArgs['orderBy'] }
        : { orderBy?: PublisherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublisherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublisherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Publisher model
   */
  readonly fields: PublisherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Publisher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PublisherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Congregation<T extends Publisher$CongregationArgs<ExtArgs> = {}>(args?: Subset<T, Publisher$CongregationArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Publisher model
   */
  interface PublisherFieldRefs {
    readonly idPublisher: FieldRef<"Publisher", 'Int'>
    readonly name: FieldRef<"Publisher", 'String'>
    readonly congregation_id: FieldRef<"Publisher", 'Int'>
    readonly createdAt: FieldRef<"Publisher", 'DateTime'>
    readonly updatedAt: FieldRef<"Publisher", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Publisher findUnique
   */
  export type PublisherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publisher
     */
    select?: PublisherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Publisher
     */
    omit?: PublisherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublisherInclude<ExtArgs> | null
    /**
     * Filter, which Publisher to fetch.
     */
    where: PublisherWhereUniqueInput
  }

  /**
   * Publisher findUniqueOrThrow
   */
  export type PublisherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publisher
     */
    select?: PublisherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Publisher
     */
    omit?: PublisherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublisherInclude<ExtArgs> | null
    /**
     * Filter, which Publisher to fetch.
     */
    where: PublisherWhereUniqueInput
  }

  /**
   * Publisher findFirst
   */
  export type PublisherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publisher
     */
    select?: PublisherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Publisher
     */
    omit?: PublisherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublisherInclude<ExtArgs> | null
    /**
     * Filter, which Publisher to fetch.
     */
    where?: PublisherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publishers to fetch.
     */
    orderBy?: PublisherOrderByWithRelationInput | PublisherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Publishers.
     */
    cursor?: PublisherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publishers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publishers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Publishers.
     */
    distinct?: PublisherScalarFieldEnum | PublisherScalarFieldEnum[]
  }

  /**
   * Publisher findFirstOrThrow
   */
  export type PublisherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publisher
     */
    select?: PublisherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Publisher
     */
    omit?: PublisherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublisherInclude<ExtArgs> | null
    /**
     * Filter, which Publisher to fetch.
     */
    where?: PublisherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publishers to fetch.
     */
    orderBy?: PublisherOrderByWithRelationInput | PublisherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Publishers.
     */
    cursor?: PublisherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publishers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publishers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Publishers.
     */
    distinct?: PublisherScalarFieldEnum | PublisherScalarFieldEnum[]
  }

  /**
   * Publisher findMany
   */
  export type PublisherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publisher
     */
    select?: PublisherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Publisher
     */
    omit?: PublisherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublisherInclude<ExtArgs> | null
    /**
     * Filter, which Publishers to fetch.
     */
    where?: PublisherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publishers to fetch.
     */
    orderBy?: PublisherOrderByWithRelationInput | PublisherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Publishers.
     */
    cursor?: PublisherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publishers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publishers.
     */
    skip?: number
    distinct?: PublisherScalarFieldEnum | PublisherScalarFieldEnum[]
  }

  /**
   * Publisher create
   */
  export type PublisherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publisher
     */
    select?: PublisherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Publisher
     */
    omit?: PublisherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublisherInclude<ExtArgs> | null
    /**
     * The data needed to create a Publisher.
     */
    data?: XOR<PublisherCreateInput, PublisherUncheckedCreateInput>
  }

  /**
   * Publisher createMany
   */
  export type PublisherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Publishers.
     */
    data: PublisherCreateManyInput | PublisherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Publisher update
   */
  export type PublisherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publisher
     */
    select?: PublisherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Publisher
     */
    omit?: PublisherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublisherInclude<ExtArgs> | null
    /**
     * The data needed to update a Publisher.
     */
    data: XOR<PublisherUpdateInput, PublisherUncheckedUpdateInput>
    /**
     * Choose, which Publisher to update.
     */
    where: PublisherWhereUniqueInput
  }

  /**
   * Publisher updateMany
   */
  export type PublisherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Publishers.
     */
    data: XOR<PublisherUpdateManyMutationInput, PublisherUncheckedUpdateManyInput>
    /**
     * Filter which Publishers to update
     */
    where?: PublisherWhereInput
    /**
     * Limit how many Publishers to update.
     */
    limit?: number
  }

  /**
   * Publisher upsert
   */
  export type PublisherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publisher
     */
    select?: PublisherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Publisher
     */
    omit?: PublisherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublisherInclude<ExtArgs> | null
    /**
     * The filter to search for the Publisher to update in case it exists.
     */
    where: PublisherWhereUniqueInput
    /**
     * In case the Publisher found by the `where` argument doesn't exist, create a new Publisher with this data.
     */
    create: XOR<PublisherCreateInput, PublisherUncheckedCreateInput>
    /**
     * In case the Publisher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PublisherUpdateInput, PublisherUncheckedUpdateInput>
  }

  /**
   * Publisher delete
   */
  export type PublisherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publisher
     */
    select?: PublisherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Publisher
     */
    omit?: PublisherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublisherInclude<ExtArgs> | null
    /**
     * Filter which Publisher to delete.
     */
    where: PublisherWhereUniqueInput
  }

  /**
   * Publisher deleteMany
   */
  export type PublisherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Publishers to delete
     */
    where?: PublisherWhereInput
    /**
     * Limit how many Publishers to delete.
     */
    limit?: number
  }

  /**
   * Publisher.Congregation
   */
  export type Publisher$CongregationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
    where?: CongregationWhereInput
  }

  /**
   * Publisher without action
   */
  export type PublisherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publisher
     */
    select?: PublisherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Publisher
     */
    omit?: PublisherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublisherInclude<ExtArgs> | null
  }


  /**
   * Model Territory
   */

  export type AggregateTerritory = {
    _count: TerritoryCountAggregateOutputType | null
    _avg: TerritoryAvgAggregateOutputType | null
    _sum: TerritorySumAggregateOutputType | null
    _min: TerritoryMinAggregateOutputType | null
    _max: TerritoryMaxAggregateOutputType | null
  }

  export type TerritoryAvgAggregateOutputType = {
    idTerritory: number | null
    congregation_id: number | null
  }

  export type TerritorySumAggregateOutputType = {
    idTerritory: number | null
    congregation_id: number | null
  }

  export type TerritoryMinAggregateOutputType = {
    idTerritory: number | null
    name: string | null
    congregation_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TerritoryMaxAggregateOutputType = {
    idTerritory: number | null
    name: string | null
    congregation_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TerritoryCountAggregateOutputType = {
    idTerritory: number
    name: number
    congregation_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TerritoryAvgAggregateInputType = {
    idTerritory?: true
    congregation_id?: true
  }

  export type TerritorySumAggregateInputType = {
    idTerritory?: true
    congregation_id?: true
  }

  export type TerritoryMinAggregateInputType = {
    idTerritory?: true
    name?: true
    congregation_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TerritoryMaxAggregateInputType = {
    idTerritory?: true
    name?: true
    congregation_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TerritoryCountAggregateInputType = {
    idTerritory?: true
    name?: true
    congregation_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TerritoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Territory to aggregate.
     */
    where?: TerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Territories to fetch.
     */
    orderBy?: TerritoryOrderByWithRelationInput | TerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Territories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Territories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Territories
    **/
    _count?: true | TerritoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TerritoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TerritorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TerritoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TerritoryMaxAggregateInputType
  }

  export type GetTerritoryAggregateType<T extends TerritoryAggregateArgs> = {
        [P in keyof T & keyof AggregateTerritory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerritory[P]>
      : GetScalarType<T[P], AggregateTerritory[P]>
  }




  export type TerritoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TerritoryWhereInput
    orderBy?: TerritoryOrderByWithAggregationInput | TerritoryOrderByWithAggregationInput[]
    by: TerritoryScalarFieldEnum[] | TerritoryScalarFieldEnum
    having?: TerritoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TerritoryCountAggregateInputType | true
    _avg?: TerritoryAvgAggregateInputType
    _sum?: TerritorySumAggregateInputType
    _min?: TerritoryMinAggregateInputType
    _max?: TerritoryMaxAggregateInputType
  }

  export type TerritoryGroupByOutputType = {
    idTerritory: number
    name: string | null
    congregation_id: number | null
    createdAt: Date
    updatedAt: Date | null
    _count: TerritoryCountAggregateOutputType | null
    _avg: TerritoryAvgAggregateOutputType | null
    _sum: TerritorySumAggregateOutputType | null
    _min: TerritoryMinAggregateOutputType | null
    _max: TerritoryMaxAggregateOutputType | null
  }

  type GetTerritoryGroupByPayload<T extends TerritoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TerritoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TerritoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TerritoryGroupByOutputType[P]>
            : GetScalarType<T[P], TerritoryGroupByOutputType[P]>
        }
      >
    >


  export type TerritorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idTerritory?: boolean
    name?: boolean
    congregation_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Building?: boolean | Territory$BuildingArgs<ExtArgs>
    Congregation?: boolean | Territory$CongregationArgs<ExtArgs>
    _count?: boolean | TerritoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["territory"]>



  export type TerritorySelectScalar = {
    idTerritory?: boolean
    name?: boolean
    congregation_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TerritoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idTerritory" | "name" | "congregation_id" | "createdAt" | "updatedAt", ExtArgs["result"]["territory"]>
  export type TerritoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Building?: boolean | Territory$BuildingArgs<ExtArgs>
    Congregation?: boolean | Territory$CongregationArgs<ExtArgs>
    _count?: boolean | TerritoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TerritoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Territory"
    objects: {
      Building: Prisma.$BuildingPayload<ExtArgs>[]
      Congregation: Prisma.$CongregationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      idTerritory: number
      name: string | null
      congregation_id: number | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["territory"]>
    composites: {}
  }

  type TerritoryGetPayload<S extends boolean | null | undefined | TerritoryDefaultArgs> = $Result.GetResult<Prisma.$TerritoryPayload, S>

  type TerritoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TerritoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TerritoryCountAggregateInputType | true
    }

  export interface TerritoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Territory'], meta: { name: 'Territory' } }
    /**
     * Find zero or one Territory that matches the filter.
     * @param {TerritoryFindUniqueArgs} args - Arguments to find a Territory
     * @example
     * // Get one Territory
     * const territory = await prisma.territory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TerritoryFindUniqueArgs>(args: SelectSubset<T, TerritoryFindUniqueArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Territory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TerritoryFindUniqueOrThrowArgs} args - Arguments to find a Territory
     * @example
     * // Get one Territory
     * const territory = await prisma.territory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TerritoryFindUniqueOrThrowArgs>(args: SelectSubset<T, TerritoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Territory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryFindFirstArgs} args - Arguments to find a Territory
     * @example
     * // Get one Territory
     * const territory = await prisma.territory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TerritoryFindFirstArgs>(args?: SelectSubset<T, TerritoryFindFirstArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Territory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryFindFirstOrThrowArgs} args - Arguments to find a Territory
     * @example
     * // Get one Territory
     * const territory = await prisma.territory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TerritoryFindFirstOrThrowArgs>(args?: SelectSubset<T, TerritoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Territories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Territories
     * const territories = await prisma.territory.findMany()
     * 
     * // Get first 10 Territories
     * const territories = await prisma.territory.findMany({ take: 10 })
     * 
     * // Only select the `idTerritory`
     * const territoryWithIdTerritoryOnly = await prisma.territory.findMany({ select: { idTerritory: true } })
     * 
     */
    findMany<T extends TerritoryFindManyArgs>(args?: SelectSubset<T, TerritoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Territory.
     * @param {TerritoryCreateArgs} args - Arguments to create a Territory.
     * @example
     * // Create one Territory
     * const Territory = await prisma.territory.create({
     *   data: {
     *     // ... data to create a Territory
     *   }
     * })
     * 
     */
    create<T extends TerritoryCreateArgs>(args: SelectSubset<T, TerritoryCreateArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Territories.
     * @param {TerritoryCreateManyArgs} args - Arguments to create many Territories.
     * @example
     * // Create many Territories
     * const territory = await prisma.territory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TerritoryCreateManyArgs>(args?: SelectSubset<T, TerritoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Territory.
     * @param {TerritoryDeleteArgs} args - Arguments to delete one Territory.
     * @example
     * // Delete one Territory
     * const Territory = await prisma.territory.delete({
     *   where: {
     *     // ... filter to delete one Territory
     *   }
     * })
     * 
     */
    delete<T extends TerritoryDeleteArgs>(args: SelectSubset<T, TerritoryDeleteArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Territory.
     * @param {TerritoryUpdateArgs} args - Arguments to update one Territory.
     * @example
     * // Update one Territory
     * const territory = await prisma.territory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TerritoryUpdateArgs>(args: SelectSubset<T, TerritoryUpdateArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Territories.
     * @param {TerritoryDeleteManyArgs} args - Arguments to filter Territories to delete.
     * @example
     * // Delete a few Territories
     * const { count } = await prisma.territory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TerritoryDeleteManyArgs>(args?: SelectSubset<T, TerritoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Territories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Territories
     * const territory = await prisma.territory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TerritoryUpdateManyArgs>(args: SelectSubset<T, TerritoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Territory.
     * @param {TerritoryUpsertArgs} args - Arguments to update or create a Territory.
     * @example
     * // Update or create a Territory
     * const territory = await prisma.territory.upsert({
     *   create: {
     *     // ... data to create a Territory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Territory we want to update
     *   }
     * })
     */
    upsert<T extends TerritoryUpsertArgs>(args: SelectSubset<T, TerritoryUpsertArgs<ExtArgs>>): Prisma__TerritoryClient<$Result.GetResult<Prisma.$TerritoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Territories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryCountArgs} args - Arguments to filter Territories to count.
     * @example
     * // Count the number of Territories
     * const count = await prisma.territory.count({
     *   where: {
     *     // ... the filter for the Territories we want to count
     *   }
     * })
    **/
    count<T extends TerritoryCountArgs>(
      args?: Subset<T, TerritoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TerritoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Territory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TerritoryAggregateArgs>(args: Subset<T, TerritoryAggregateArgs>): Prisma.PrismaPromise<GetTerritoryAggregateType<T>>

    /**
     * Group by Territory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerritoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TerritoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TerritoryGroupByArgs['orderBy'] }
        : { orderBy?: TerritoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TerritoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTerritoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Territory model
   */
  readonly fields: TerritoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Territory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TerritoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Building<T extends Territory$BuildingArgs<ExtArgs> = {}>(args?: Subset<T, Territory$BuildingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Congregation<T extends Territory$CongregationArgs<ExtArgs> = {}>(args?: Subset<T, Territory$CongregationArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Territory model
   */
  interface TerritoryFieldRefs {
    readonly idTerritory: FieldRef<"Territory", 'Int'>
    readonly name: FieldRef<"Territory", 'String'>
    readonly congregation_id: FieldRef<"Territory", 'Int'>
    readonly createdAt: FieldRef<"Territory", 'DateTime'>
    readonly updatedAt: FieldRef<"Territory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Territory findUnique
   */
  export type TerritoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter, which Territory to fetch.
     */
    where: TerritoryWhereUniqueInput
  }

  /**
   * Territory findUniqueOrThrow
   */
  export type TerritoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter, which Territory to fetch.
     */
    where: TerritoryWhereUniqueInput
  }

  /**
   * Territory findFirst
   */
  export type TerritoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter, which Territory to fetch.
     */
    where?: TerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Territories to fetch.
     */
    orderBy?: TerritoryOrderByWithRelationInput | TerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Territories.
     */
    cursor?: TerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Territories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Territories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Territories.
     */
    distinct?: TerritoryScalarFieldEnum | TerritoryScalarFieldEnum[]
  }

  /**
   * Territory findFirstOrThrow
   */
  export type TerritoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter, which Territory to fetch.
     */
    where?: TerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Territories to fetch.
     */
    orderBy?: TerritoryOrderByWithRelationInput | TerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Territories.
     */
    cursor?: TerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Territories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Territories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Territories.
     */
    distinct?: TerritoryScalarFieldEnum | TerritoryScalarFieldEnum[]
  }

  /**
   * Territory findMany
   */
  export type TerritoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter, which Territories to fetch.
     */
    where?: TerritoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Territories to fetch.
     */
    orderBy?: TerritoryOrderByWithRelationInput | TerritoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Territories.
     */
    cursor?: TerritoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Territories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Territories.
     */
    skip?: number
    distinct?: TerritoryScalarFieldEnum | TerritoryScalarFieldEnum[]
  }

  /**
   * Territory create
   */
  export type TerritoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Territory.
     */
    data?: XOR<TerritoryCreateInput, TerritoryUncheckedCreateInput>
  }

  /**
   * Territory createMany
   */
  export type TerritoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Territories.
     */
    data: TerritoryCreateManyInput | TerritoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Territory update
   */
  export type TerritoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Territory.
     */
    data: XOR<TerritoryUpdateInput, TerritoryUncheckedUpdateInput>
    /**
     * Choose, which Territory to update.
     */
    where: TerritoryWhereUniqueInput
  }

  /**
   * Territory updateMany
   */
  export type TerritoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Territories.
     */
    data: XOR<TerritoryUpdateManyMutationInput, TerritoryUncheckedUpdateManyInput>
    /**
     * Filter which Territories to update
     */
    where?: TerritoryWhereInput
    /**
     * Limit how many Territories to update.
     */
    limit?: number
  }

  /**
   * Territory upsert
   */
  export type TerritoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Territory to update in case it exists.
     */
    where: TerritoryWhereUniqueInput
    /**
     * In case the Territory found by the `where` argument doesn't exist, create a new Territory with this data.
     */
    create: XOR<TerritoryCreateInput, TerritoryUncheckedCreateInput>
    /**
     * In case the Territory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TerritoryUpdateInput, TerritoryUncheckedUpdateInput>
  }

  /**
   * Territory delete
   */
  export type TerritoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
    /**
     * Filter which Territory to delete.
     */
    where: TerritoryWhereUniqueInput
  }

  /**
   * Territory deleteMany
   */
  export type TerritoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Territories to delete
     */
    where?: TerritoryWhereInput
    /**
     * Limit how many Territories to delete.
     */
    limit?: number
  }

  /**
   * Territory.Building
   */
  export type Territory$BuildingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    where?: BuildingWhereInput
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    cursor?: BuildingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * Territory.Congregation
   */
  export type Territory$CongregationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Congregation
     */
    select?: CongregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Congregation
     */
    omit?: CongregationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CongregationInclude<ExtArgs> | null
    where?: CongregationWhereInput
  }

  /**
   * Territory without action
   */
  export type TerritoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Territory
     */
    select?: TerritorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Territory
     */
    omit?: TerritoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerritoryInclude<ExtArgs> | null
  }


  /**
   * Model App1Entry
   */

  export type AggregateApp1Entry = {
    _count: App1EntryCountAggregateOutputType | null
    _avg: App1EntryAvgAggregateOutputType | null
    _sum: App1EntrySumAggregateOutputType | null
    _min: App1EntryMinAggregateOutputType | null
    _max: App1EntryMaxAggregateOutputType | null
  }

  export type App1EntryAvgAggregateOutputType = {
    id: number | null
    id_cong: number | null
  }

  export type App1EntrySumAggregateOutputType = {
    id: number | null
    id_cong: number | null
  }

  export type App1EntryMinAggregateOutputType = {
    id: number | null
    id_cong: number | null
    Gps: string | null
    Landmark: string | null
    Territory: string | null
    Url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type App1EntryMaxAggregateOutputType = {
    id: number | null
    id_cong: number | null
    Gps: string | null
    Landmark: string | null
    Territory: string | null
    Url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type App1EntryCountAggregateOutputType = {
    id: number
    id_cong: number
    Gps: number
    Landmark: number
    Territory: number
    Url: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type App1EntryAvgAggregateInputType = {
    id?: true
    id_cong?: true
  }

  export type App1EntrySumAggregateInputType = {
    id?: true
    id_cong?: true
  }

  export type App1EntryMinAggregateInputType = {
    id?: true
    id_cong?: true
    Gps?: true
    Landmark?: true
    Territory?: true
    Url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type App1EntryMaxAggregateInputType = {
    id?: true
    id_cong?: true
    Gps?: true
    Landmark?: true
    Territory?: true
    Url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type App1EntryCountAggregateInputType = {
    id?: true
    id_cong?: true
    Gps?: true
    Landmark?: true
    Territory?: true
    Url?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type App1EntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which App1Entry to aggregate.
     */
    where?: App1EntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of App1Entries to fetch.
     */
    orderBy?: App1EntryOrderByWithRelationInput | App1EntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: App1EntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` App1Entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` App1Entries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned App1Entries
    **/
    _count?: true | App1EntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: App1EntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: App1EntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: App1EntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: App1EntryMaxAggregateInputType
  }

  export type GetApp1EntryAggregateType<T extends App1EntryAggregateArgs> = {
        [P in keyof T & keyof AggregateApp1Entry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApp1Entry[P]>
      : GetScalarType<T[P], AggregateApp1Entry[P]>
  }




  export type App1EntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: App1EntryWhereInput
    orderBy?: App1EntryOrderByWithAggregationInput | App1EntryOrderByWithAggregationInput[]
    by: App1EntryScalarFieldEnum[] | App1EntryScalarFieldEnum
    having?: App1EntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: App1EntryCountAggregateInputType | true
    _avg?: App1EntryAvgAggregateInputType
    _sum?: App1EntrySumAggregateInputType
    _min?: App1EntryMinAggregateInputType
    _max?: App1EntryMaxAggregateInputType
  }

  export type App1EntryGroupByOutputType = {
    id: number
    id_cong: number
    Gps: string
    Landmark: string
    Territory: string
    Url: string
    createdAt: Date
    updatedAt: Date | null
    _count: App1EntryCountAggregateOutputType | null
    _avg: App1EntryAvgAggregateOutputType | null
    _sum: App1EntrySumAggregateOutputType | null
    _min: App1EntryMinAggregateOutputType | null
    _max: App1EntryMaxAggregateOutputType | null
  }

  type GetApp1EntryGroupByPayload<T extends App1EntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<App1EntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof App1EntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], App1EntryGroupByOutputType[P]>
            : GetScalarType<T[P], App1EntryGroupByOutputType[P]>
        }
      >
    >


  export type App1EntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_cong?: boolean
    Gps?: boolean
    Landmark?: boolean
    Territory?: boolean
    Url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["app1Entry"]>



  export type App1EntrySelectScalar = {
    id?: boolean
    id_cong?: boolean
    Gps?: boolean
    Landmark?: boolean
    Territory?: boolean
    Url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type App1EntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "id_cong" | "Gps" | "Landmark" | "Territory" | "Url" | "createdAt" | "updatedAt", ExtArgs["result"]["app1Entry"]>

  export type $App1EntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "App1Entry"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_cong: number
      Gps: string
      Landmark: string
      Territory: string
      Url: string
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["app1Entry"]>
    composites: {}
  }

  type App1EntryGetPayload<S extends boolean | null | undefined | App1EntryDefaultArgs> = $Result.GetResult<Prisma.$App1EntryPayload, S>

  type App1EntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<App1EntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: App1EntryCountAggregateInputType | true
    }

  export interface App1EntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['App1Entry'], meta: { name: 'App1Entry' } }
    /**
     * Find zero or one App1Entry that matches the filter.
     * @param {App1EntryFindUniqueArgs} args - Arguments to find a App1Entry
     * @example
     * // Get one App1Entry
     * const app1Entry = await prisma.app1Entry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends App1EntryFindUniqueArgs>(args: SelectSubset<T, App1EntryFindUniqueArgs<ExtArgs>>): Prisma__App1EntryClient<$Result.GetResult<Prisma.$App1EntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one App1Entry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {App1EntryFindUniqueOrThrowArgs} args - Arguments to find a App1Entry
     * @example
     * // Get one App1Entry
     * const app1Entry = await prisma.app1Entry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends App1EntryFindUniqueOrThrowArgs>(args: SelectSubset<T, App1EntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__App1EntryClient<$Result.GetResult<Prisma.$App1EntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first App1Entry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App1EntryFindFirstArgs} args - Arguments to find a App1Entry
     * @example
     * // Get one App1Entry
     * const app1Entry = await prisma.app1Entry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends App1EntryFindFirstArgs>(args?: SelectSubset<T, App1EntryFindFirstArgs<ExtArgs>>): Prisma__App1EntryClient<$Result.GetResult<Prisma.$App1EntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first App1Entry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App1EntryFindFirstOrThrowArgs} args - Arguments to find a App1Entry
     * @example
     * // Get one App1Entry
     * const app1Entry = await prisma.app1Entry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends App1EntryFindFirstOrThrowArgs>(args?: SelectSubset<T, App1EntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__App1EntryClient<$Result.GetResult<Prisma.$App1EntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more App1Entries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App1EntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all App1Entries
     * const app1Entries = await prisma.app1Entry.findMany()
     * 
     * // Get first 10 App1Entries
     * const app1Entries = await prisma.app1Entry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const app1EntryWithIdOnly = await prisma.app1Entry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends App1EntryFindManyArgs>(args?: SelectSubset<T, App1EntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$App1EntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a App1Entry.
     * @param {App1EntryCreateArgs} args - Arguments to create a App1Entry.
     * @example
     * // Create one App1Entry
     * const App1Entry = await prisma.app1Entry.create({
     *   data: {
     *     // ... data to create a App1Entry
     *   }
     * })
     * 
     */
    create<T extends App1EntryCreateArgs>(args: SelectSubset<T, App1EntryCreateArgs<ExtArgs>>): Prisma__App1EntryClient<$Result.GetResult<Prisma.$App1EntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many App1Entries.
     * @param {App1EntryCreateManyArgs} args - Arguments to create many App1Entries.
     * @example
     * // Create many App1Entries
     * const app1Entry = await prisma.app1Entry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends App1EntryCreateManyArgs>(args?: SelectSubset<T, App1EntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a App1Entry.
     * @param {App1EntryDeleteArgs} args - Arguments to delete one App1Entry.
     * @example
     * // Delete one App1Entry
     * const App1Entry = await prisma.app1Entry.delete({
     *   where: {
     *     // ... filter to delete one App1Entry
     *   }
     * })
     * 
     */
    delete<T extends App1EntryDeleteArgs>(args: SelectSubset<T, App1EntryDeleteArgs<ExtArgs>>): Prisma__App1EntryClient<$Result.GetResult<Prisma.$App1EntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one App1Entry.
     * @param {App1EntryUpdateArgs} args - Arguments to update one App1Entry.
     * @example
     * // Update one App1Entry
     * const app1Entry = await prisma.app1Entry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends App1EntryUpdateArgs>(args: SelectSubset<T, App1EntryUpdateArgs<ExtArgs>>): Prisma__App1EntryClient<$Result.GetResult<Prisma.$App1EntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more App1Entries.
     * @param {App1EntryDeleteManyArgs} args - Arguments to filter App1Entries to delete.
     * @example
     * // Delete a few App1Entries
     * const { count } = await prisma.app1Entry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends App1EntryDeleteManyArgs>(args?: SelectSubset<T, App1EntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more App1Entries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App1EntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many App1Entries
     * const app1Entry = await prisma.app1Entry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends App1EntryUpdateManyArgs>(args: SelectSubset<T, App1EntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one App1Entry.
     * @param {App1EntryUpsertArgs} args - Arguments to update or create a App1Entry.
     * @example
     * // Update or create a App1Entry
     * const app1Entry = await prisma.app1Entry.upsert({
     *   create: {
     *     // ... data to create a App1Entry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the App1Entry we want to update
     *   }
     * })
     */
    upsert<T extends App1EntryUpsertArgs>(args: SelectSubset<T, App1EntryUpsertArgs<ExtArgs>>): Prisma__App1EntryClient<$Result.GetResult<Prisma.$App1EntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of App1Entries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App1EntryCountArgs} args - Arguments to filter App1Entries to count.
     * @example
     * // Count the number of App1Entries
     * const count = await prisma.app1Entry.count({
     *   where: {
     *     // ... the filter for the App1Entries we want to count
     *   }
     * })
    **/
    count<T extends App1EntryCountArgs>(
      args?: Subset<T, App1EntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], App1EntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a App1Entry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App1EntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends App1EntryAggregateArgs>(args: Subset<T, App1EntryAggregateArgs>): Prisma.PrismaPromise<GetApp1EntryAggregateType<T>>

    /**
     * Group by App1Entry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App1EntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends App1EntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: App1EntryGroupByArgs['orderBy'] }
        : { orderBy?: App1EntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, App1EntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApp1EntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the App1Entry model
   */
  readonly fields: App1EntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for App1Entry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__App1EntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the App1Entry model
   */
  interface App1EntryFieldRefs {
    readonly id: FieldRef<"App1Entry", 'Int'>
    readonly id_cong: FieldRef<"App1Entry", 'Int'>
    readonly Gps: FieldRef<"App1Entry", 'String'>
    readonly Landmark: FieldRef<"App1Entry", 'String'>
    readonly Territory: FieldRef<"App1Entry", 'String'>
    readonly Url: FieldRef<"App1Entry", 'String'>
    readonly createdAt: FieldRef<"App1Entry", 'DateTime'>
    readonly updatedAt: FieldRef<"App1Entry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * App1Entry findUnique
   */
  export type App1EntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App1Entry
     */
    select?: App1EntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the App1Entry
     */
    omit?: App1EntryOmit<ExtArgs> | null
    /**
     * Filter, which App1Entry to fetch.
     */
    where: App1EntryWhereUniqueInput
  }

  /**
   * App1Entry findUniqueOrThrow
   */
  export type App1EntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App1Entry
     */
    select?: App1EntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the App1Entry
     */
    omit?: App1EntryOmit<ExtArgs> | null
    /**
     * Filter, which App1Entry to fetch.
     */
    where: App1EntryWhereUniqueInput
  }

  /**
   * App1Entry findFirst
   */
  export type App1EntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App1Entry
     */
    select?: App1EntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the App1Entry
     */
    omit?: App1EntryOmit<ExtArgs> | null
    /**
     * Filter, which App1Entry to fetch.
     */
    where?: App1EntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of App1Entries to fetch.
     */
    orderBy?: App1EntryOrderByWithRelationInput | App1EntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for App1Entries.
     */
    cursor?: App1EntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` App1Entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` App1Entries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of App1Entries.
     */
    distinct?: App1EntryScalarFieldEnum | App1EntryScalarFieldEnum[]
  }

  /**
   * App1Entry findFirstOrThrow
   */
  export type App1EntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App1Entry
     */
    select?: App1EntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the App1Entry
     */
    omit?: App1EntryOmit<ExtArgs> | null
    /**
     * Filter, which App1Entry to fetch.
     */
    where?: App1EntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of App1Entries to fetch.
     */
    orderBy?: App1EntryOrderByWithRelationInput | App1EntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for App1Entries.
     */
    cursor?: App1EntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` App1Entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` App1Entries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of App1Entries.
     */
    distinct?: App1EntryScalarFieldEnum | App1EntryScalarFieldEnum[]
  }

  /**
   * App1Entry findMany
   */
  export type App1EntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App1Entry
     */
    select?: App1EntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the App1Entry
     */
    omit?: App1EntryOmit<ExtArgs> | null
    /**
     * Filter, which App1Entries to fetch.
     */
    where?: App1EntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of App1Entries to fetch.
     */
    orderBy?: App1EntryOrderByWithRelationInput | App1EntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing App1Entries.
     */
    cursor?: App1EntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` App1Entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` App1Entries.
     */
    skip?: number
    distinct?: App1EntryScalarFieldEnum | App1EntryScalarFieldEnum[]
  }

  /**
   * App1Entry create
   */
  export type App1EntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App1Entry
     */
    select?: App1EntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the App1Entry
     */
    omit?: App1EntryOmit<ExtArgs> | null
    /**
     * The data needed to create a App1Entry.
     */
    data: XOR<App1EntryCreateInput, App1EntryUncheckedCreateInput>
  }

  /**
   * App1Entry createMany
   */
  export type App1EntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many App1Entries.
     */
    data: App1EntryCreateManyInput | App1EntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * App1Entry update
   */
  export type App1EntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App1Entry
     */
    select?: App1EntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the App1Entry
     */
    omit?: App1EntryOmit<ExtArgs> | null
    /**
     * The data needed to update a App1Entry.
     */
    data: XOR<App1EntryUpdateInput, App1EntryUncheckedUpdateInput>
    /**
     * Choose, which App1Entry to update.
     */
    where: App1EntryWhereUniqueInput
  }

  /**
   * App1Entry updateMany
   */
  export type App1EntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update App1Entries.
     */
    data: XOR<App1EntryUpdateManyMutationInput, App1EntryUncheckedUpdateManyInput>
    /**
     * Filter which App1Entries to update
     */
    where?: App1EntryWhereInput
    /**
     * Limit how many App1Entries to update.
     */
    limit?: number
  }

  /**
   * App1Entry upsert
   */
  export type App1EntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App1Entry
     */
    select?: App1EntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the App1Entry
     */
    omit?: App1EntryOmit<ExtArgs> | null
    /**
     * The filter to search for the App1Entry to update in case it exists.
     */
    where: App1EntryWhereUniqueInput
    /**
     * In case the App1Entry found by the `where` argument doesn't exist, create a new App1Entry with this data.
     */
    create: XOR<App1EntryCreateInput, App1EntryUncheckedCreateInput>
    /**
     * In case the App1Entry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<App1EntryUpdateInput, App1EntryUncheckedUpdateInput>
  }

  /**
   * App1Entry delete
   */
  export type App1EntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App1Entry
     */
    select?: App1EntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the App1Entry
     */
    omit?: App1EntryOmit<ExtArgs> | null
    /**
     * Filter which App1Entry to delete.
     */
    where: App1EntryWhereUniqueInput
  }

  /**
   * App1Entry deleteMany
   */
  export type App1EntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which App1Entries to delete
     */
    where?: App1EntryWhereInput
    /**
     * Limit how many App1Entries to delete.
     */
    limit?: number
  }

  /**
   * App1Entry without action
   */
  export type App1EntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App1Entry
     */
    select?: App1EntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the App1Entry
     */
    omit?: App1EntryOmit<ExtArgs> | null
  }


  /**
   * Model Login
   */

  export type AggregateLogin = {
    _count: LoginCountAggregateOutputType | null
    _avg: LoginAvgAggregateOutputType | null
    _sum: LoginSumAggregateOutputType | null
    _min: LoginMinAggregateOutputType | null
    _max: LoginMaxAggregateOutputType | null
  }

  export type LoginAvgAggregateOutputType = {
    id: number | null
    congregationNumber: number | null
    loginCount: number | null
  }

  export type LoginSumAggregateOutputType = {
    id: number | null
    congregationNumber: number | null
    loginCount: number | null
  }

  export type LoginMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    googleSignIn: boolean | null
    whatsapp: string | null
    congregationNumber: number | null
    createdAt: Date | null
    updatedAt: Date | null
    loginCount: number | null
  }

  export type LoginMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    googleSignIn: boolean | null
    whatsapp: string | null
    congregationNumber: number | null
    createdAt: Date | null
    updatedAt: Date | null
    loginCount: number | null
  }

  export type LoginCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    googleSignIn: number
    whatsapp: number
    congregationNumber: number
    createdAt: number
    updatedAt: number
    loginCount: number
    _all: number
  }


  export type LoginAvgAggregateInputType = {
    id?: true
    congregationNumber?: true
    loginCount?: true
  }

  export type LoginSumAggregateInputType = {
    id?: true
    congregationNumber?: true
    loginCount?: true
  }

  export type LoginMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    googleSignIn?: true
    whatsapp?: true
    congregationNumber?: true
    createdAt?: true
    updatedAt?: true
    loginCount?: true
  }

  export type LoginMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    googleSignIn?: true
    whatsapp?: true
    congregationNumber?: true
    createdAt?: true
    updatedAt?: true
    loginCount?: true
  }

  export type LoginCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    googleSignIn?: true
    whatsapp?: true
    congregationNumber?: true
    createdAt?: true
    updatedAt?: true
    loginCount?: true
    _all?: true
  }

  export type LoginAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Login to aggregate.
     */
    where?: LoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logins to fetch.
     */
    orderBy?: LoginOrderByWithRelationInput | LoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logins
    **/
    _count?: true | LoginCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoginAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoginSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoginMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoginMaxAggregateInputType
  }

  export type GetLoginAggregateType<T extends LoginAggregateArgs> = {
        [P in keyof T & keyof AggregateLogin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogin[P]>
      : GetScalarType<T[P], AggregateLogin[P]>
  }




  export type LoginGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoginWhereInput
    orderBy?: LoginOrderByWithAggregationInput | LoginOrderByWithAggregationInput[]
    by: LoginScalarFieldEnum[] | LoginScalarFieldEnum
    having?: LoginScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoginCountAggregateInputType | true
    _avg?: LoginAvgAggregateInputType
    _sum?: LoginSumAggregateInputType
    _min?: LoginMinAggregateInputType
    _max?: LoginMaxAggregateInputType
  }

  export type LoginGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string | null
    googleSignIn: boolean
    whatsapp: string
    congregationNumber: number
    createdAt: Date
    updatedAt: Date
    loginCount: number
    _count: LoginCountAggregateOutputType | null
    _avg: LoginAvgAggregateOutputType | null
    _sum: LoginSumAggregateOutputType | null
    _min: LoginMinAggregateOutputType | null
    _max: LoginMaxAggregateOutputType | null
  }

  type GetLoginGroupByPayload<T extends LoginGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoginGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoginGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoginGroupByOutputType[P]>
            : GetScalarType<T[P], LoginGroupByOutputType[P]>
        }
      >
    >


  export type LoginSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    googleSignIn?: boolean
    whatsapp?: boolean
    congregationNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loginCount?: boolean
    Congregation?: boolean | CongregationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["login"]>



  export type LoginSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    googleSignIn?: boolean
    whatsapp?: boolean
    congregationNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loginCount?: boolean
  }

  export type LoginOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "googleSignIn" | "whatsapp" | "congregationNumber" | "createdAt" | "updatedAt" | "loginCount", ExtArgs["result"]["login"]>
  export type LoginInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Congregation?: boolean | CongregationDefaultArgs<ExtArgs>
  }

  export type $LoginPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Login"
    objects: {
      Congregation: Prisma.$CongregationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string | null
      googleSignIn: boolean
      whatsapp: string
      congregationNumber: number
      createdAt: Date
      updatedAt: Date
      loginCount: number
    }, ExtArgs["result"]["login"]>
    composites: {}
  }

  type LoginGetPayload<S extends boolean | null | undefined | LoginDefaultArgs> = $Result.GetResult<Prisma.$LoginPayload, S>

  type LoginCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LoginFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LoginCountAggregateInputType | true
    }

  export interface LoginDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Login'], meta: { name: 'Login' } }
    /**
     * Find zero or one Login that matches the filter.
     * @param {LoginFindUniqueArgs} args - Arguments to find a Login
     * @example
     * // Get one Login
     * const login = await prisma.login.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoginFindUniqueArgs>(args: SelectSubset<T, LoginFindUniqueArgs<ExtArgs>>): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Login that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LoginFindUniqueOrThrowArgs} args - Arguments to find a Login
     * @example
     * // Get one Login
     * const login = await prisma.login.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoginFindUniqueOrThrowArgs>(args: SelectSubset<T, LoginFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Login that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginFindFirstArgs} args - Arguments to find a Login
     * @example
     * // Get one Login
     * const login = await prisma.login.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoginFindFirstArgs>(args?: SelectSubset<T, LoginFindFirstArgs<ExtArgs>>): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Login that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginFindFirstOrThrowArgs} args - Arguments to find a Login
     * @example
     * // Get one Login
     * const login = await prisma.login.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoginFindFirstOrThrowArgs>(args?: SelectSubset<T, LoginFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Logins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logins
     * const logins = await prisma.login.findMany()
     * 
     * // Get first 10 Logins
     * const logins = await prisma.login.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loginWithIdOnly = await prisma.login.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LoginFindManyArgs>(args?: SelectSubset<T, LoginFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Login.
     * @param {LoginCreateArgs} args - Arguments to create a Login.
     * @example
     * // Create one Login
     * const Login = await prisma.login.create({
     *   data: {
     *     // ... data to create a Login
     *   }
     * })
     * 
     */
    create<T extends LoginCreateArgs>(args: SelectSubset<T, LoginCreateArgs<ExtArgs>>): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Logins.
     * @param {LoginCreateManyArgs} args - Arguments to create many Logins.
     * @example
     * // Create many Logins
     * const login = await prisma.login.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoginCreateManyArgs>(args?: SelectSubset<T, LoginCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Login.
     * @param {LoginDeleteArgs} args - Arguments to delete one Login.
     * @example
     * // Delete one Login
     * const Login = await prisma.login.delete({
     *   where: {
     *     // ... filter to delete one Login
     *   }
     * })
     * 
     */
    delete<T extends LoginDeleteArgs>(args: SelectSubset<T, LoginDeleteArgs<ExtArgs>>): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Login.
     * @param {LoginUpdateArgs} args - Arguments to update one Login.
     * @example
     * // Update one Login
     * const login = await prisma.login.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoginUpdateArgs>(args: SelectSubset<T, LoginUpdateArgs<ExtArgs>>): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Logins.
     * @param {LoginDeleteManyArgs} args - Arguments to filter Logins to delete.
     * @example
     * // Delete a few Logins
     * const { count } = await prisma.login.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoginDeleteManyArgs>(args?: SelectSubset<T, LoginDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logins
     * const login = await prisma.login.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoginUpdateManyArgs>(args: SelectSubset<T, LoginUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Login.
     * @param {LoginUpsertArgs} args - Arguments to update or create a Login.
     * @example
     * // Update or create a Login
     * const login = await prisma.login.upsert({
     *   create: {
     *     // ... data to create a Login
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Login we want to update
     *   }
     * })
     */
    upsert<T extends LoginUpsertArgs>(args: SelectSubset<T, LoginUpsertArgs<ExtArgs>>): Prisma__LoginClient<$Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Logins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginCountArgs} args - Arguments to filter Logins to count.
     * @example
     * // Count the number of Logins
     * const count = await prisma.login.count({
     *   where: {
     *     // ... the filter for the Logins we want to count
     *   }
     * })
    **/
    count<T extends LoginCountArgs>(
      args?: Subset<T, LoginCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoginCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Login.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoginAggregateArgs>(args: Subset<T, LoginAggregateArgs>): Prisma.PrismaPromise<GetLoginAggregateType<T>>

    /**
     * Group by Login.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoginGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoginGroupByArgs['orderBy'] }
        : { orderBy?: LoginGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoginGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoginGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Login model
   */
  readonly fields: LoginFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Login.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoginClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Congregation<T extends CongregationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CongregationDefaultArgs<ExtArgs>>): Prisma__CongregationClient<$Result.GetResult<Prisma.$CongregationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Login model
   */
  interface LoginFieldRefs {
    readonly id: FieldRef<"Login", 'Int'>
    readonly name: FieldRef<"Login", 'String'>
    readonly email: FieldRef<"Login", 'String'>
    readonly password: FieldRef<"Login", 'String'>
    readonly googleSignIn: FieldRef<"Login", 'Boolean'>
    readonly whatsapp: FieldRef<"Login", 'String'>
    readonly congregationNumber: FieldRef<"Login", 'Int'>
    readonly createdAt: FieldRef<"Login", 'DateTime'>
    readonly updatedAt: FieldRef<"Login", 'DateTime'>
    readonly loginCount: FieldRef<"Login", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Login findUnique
   */
  export type LoginFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Login
     */
    omit?: LoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginInclude<ExtArgs> | null
    /**
     * Filter, which Login to fetch.
     */
    where: LoginWhereUniqueInput
  }

  /**
   * Login findUniqueOrThrow
   */
  export type LoginFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Login
     */
    omit?: LoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginInclude<ExtArgs> | null
    /**
     * Filter, which Login to fetch.
     */
    where: LoginWhereUniqueInput
  }

  /**
   * Login findFirst
   */
  export type LoginFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Login
     */
    omit?: LoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginInclude<ExtArgs> | null
    /**
     * Filter, which Login to fetch.
     */
    where?: LoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logins to fetch.
     */
    orderBy?: LoginOrderByWithRelationInput | LoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logins.
     */
    cursor?: LoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logins.
     */
    distinct?: LoginScalarFieldEnum | LoginScalarFieldEnum[]
  }

  /**
   * Login findFirstOrThrow
   */
  export type LoginFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Login
     */
    omit?: LoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginInclude<ExtArgs> | null
    /**
     * Filter, which Login to fetch.
     */
    where?: LoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logins to fetch.
     */
    orderBy?: LoginOrderByWithRelationInput | LoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logins.
     */
    cursor?: LoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logins.
     */
    distinct?: LoginScalarFieldEnum | LoginScalarFieldEnum[]
  }

  /**
   * Login findMany
   */
  export type LoginFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Login
     */
    omit?: LoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginInclude<ExtArgs> | null
    /**
     * Filter, which Logins to fetch.
     */
    where?: LoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logins to fetch.
     */
    orderBy?: LoginOrderByWithRelationInput | LoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logins.
     */
    cursor?: LoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logins.
     */
    skip?: number
    distinct?: LoginScalarFieldEnum | LoginScalarFieldEnum[]
  }

  /**
   * Login create
   */
  export type LoginCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Login
     */
    omit?: LoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginInclude<ExtArgs> | null
    /**
     * The data needed to create a Login.
     */
    data: XOR<LoginCreateInput, LoginUncheckedCreateInput>
  }

  /**
   * Login createMany
   */
  export type LoginCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logins.
     */
    data: LoginCreateManyInput | LoginCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Login update
   */
  export type LoginUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Login
     */
    omit?: LoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginInclude<ExtArgs> | null
    /**
     * The data needed to update a Login.
     */
    data: XOR<LoginUpdateInput, LoginUncheckedUpdateInput>
    /**
     * Choose, which Login to update.
     */
    where: LoginWhereUniqueInput
  }

  /**
   * Login updateMany
   */
  export type LoginUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logins.
     */
    data: XOR<LoginUpdateManyMutationInput, LoginUncheckedUpdateManyInput>
    /**
     * Filter which Logins to update
     */
    where?: LoginWhereInput
    /**
     * Limit how many Logins to update.
     */
    limit?: number
  }

  /**
   * Login upsert
   */
  export type LoginUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Login
     */
    omit?: LoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginInclude<ExtArgs> | null
    /**
     * The filter to search for the Login to update in case it exists.
     */
    where: LoginWhereUniqueInput
    /**
     * In case the Login found by the `where` argument doesn't exist, create a new Login with this data.
     */
    create: XOR<LoginCreateInput, LoginUncheckedCreateInput>
    /**
     * In case the Login was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoginUpdateInput, LoginUncheckedUpdateInput>
  }

  /**
   * Login delete
   */
  export type LoginDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Login
     */
    omit?: LoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginInclude<ExtArgs> | null
    /**
     * Filter which Login to delete.
     */
    where: LoginWhereUniqueInput
  }

  /**
   * Login deleteMany
   */
  export type LoginDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logins to delete
     */
    where?: LoginWhereInput
    /**
     * Limit how many Logins to delete.
     */
    limit?: number
  }

  /**
   * Login without action
   */
  export type LoginDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Login
     */
    select?: LoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Login
     */
    omit?: LoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BuildingScalarFieldEnum: {
    idBuilding: 'idBuilding',
    lat: 'lat',
    long: 'long',
    territory_id: 'territory_id',
    last_modified: 'last_modified',
    address: 'address',
    updatedAt: 'updatedAt'
  };

  export type BuildingScalarFieldEnum = (typeof BuildingScalarFieldEnum)[keyof typeof BuildingScalarFieldEnum]


  export const CongregationScalarFieldEnum: {
    idCongregation: 'idCongregation',
    name: 'name',
    language: 'language',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CongregationScalarFieldEnum = (typeof CongregationScalarFieldEnum)[keyof typeof CongregationScalarFieldEnum]


  export const DoorScalarFieldEnum: {
    idDoor: 'idDoor',
    language: 'language',
    information_name: 'information_name',
    building_id: 'building_id',
    id_cong_app: 'id_cong_app',
    id_cong_lang: 'id_cong_lang',
    lastModified: 'lastModified',
    updatedAt: 'updatedAt'
  };

  export type DoorScalarFieldEnum = (typeof DoorScalarFieldEnum)[keyof typeof DoorScalarFieldEnum]


  export const LanguageScalarFieldEnum: {
    idLanguage: 'idLanguage',
    id_cong_app: 'id_cong_app',
    id_cong_lang: 'id_cong_lang',
    name: 'name',
    Color: 'Color',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LanguageScalarFieldEnum = (typeof LanguageScalarFieldEnum)[keyof typeof LanguageScalarFieldEnum]


  export const PublisherScalarFieldEnum: {
    idPublisher: 'idPublisher',
    name: 'name',
    congregation_id: 'congregation_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PublisherScalarFieldEnum = (typeof PublisherScalarFieldEnum)[keyof typeof PublisherScalarFieldEnum]


  export const TerritoryScalarFieldEnum: {
    idTerritory: 'idTerritory',
    name: 'name',
    congregation_id: 'congregation_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TerritoryScalarFieldEnum = (typeof TerritoryScalarFieldEnum)[keyof typeof TerritoryScalarFieldEnum]


  export const App1EntryScalarFieldEnum: {
    id: 'id',
    id_cong: 'id_cong',
    Gps: 'Gps',
    Landmark: 'Landmark',
    Territory: 'Territory',
    Url: 'Url',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type App1EntryScalarFieldEnum = (typeof App1EntryScalarFieldEnum)[keyof typeof App1EntryScalarFieldEnum]


  export const LoginScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    googleSignIn: 'googleSignIn',
    whatsapp: 'whatsapp',
    congregationNumber: 'congregationNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    loginCount: 'loginCount'
  };

  export type LoginScalarFieldEnum = (typeof LoginScalarFieldEnum)[keyof typeof LoginScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const BuildingOrderByRelevanceFieldEnum: {
    address: 'address'
  };

  export type BuildingOrderByRelevanceFieldEnum = (typeof BuildingOrderByRelevanceFieldEnum)[keyof typeof BuildingOrderByRelevanceFieldEnum]


  export const CongregationOrderByRelevanceFieldEnum: {
    name: 'name',
    language: 'language'
  };

  export type CongregationOrderByRelevanceFieldEnum = (typeof CongregationOrderByRelevanceFieldEnum)[keyof typeof CongregationOrderByRelevanceFieldEnum]


  export const DoorOrderByRelevanceFieldEnum: {
    language: 'language',
    information_name: 'information_name'
  };

  export type DoorOrderByRelevanceFieldEnum = (typeof DoorOrderByRelevanceFieldEnum)[keyof typeof DoorOrderByRelevanceFieldEnum]


  export const LanguageOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type LanguageOrderByRelevanceFieldEnum = (typeof LanguageOrderByRelevanceFieldEnum)[keyof typeof LanguageOrderByRelevanceFieldEnum]


  export const PublisherOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type PublisherOrderByRelevanceFieldEnum = (typeof PublisherOrderByRelevanceFieldEnum)[keyof typeof PublisherOrderByRelevanceFieldEnum]


  export const TerritoryOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type TerritoryOrderByRelevanceFieldEnum = (typeof TerritoryOrderByRelevanceFieldEnum)[keyof typeof TerritoryOrderByRelevanceFieldEnum]


  export const App1EntryOrderByRelevanceFieldEnum: {
    Gps: 'Gps',
    Landmark: 'Landmark',
    Territory: 'Territory',
    Url: 'Url'
  };

  export type App1EntryOrderByRelevanceFieldEnum = (typeof App1EntryOrderByRelevanceFieldEnum)[keyof typeof App1EntryOrderByRelevanceFieldEnum]


  export const LoginOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    password: 'password',
    whatsapp: 'whatsapp'
  };

  export type LoginOrderByRelevanceFieldEnum = (typeof LoginOrderByRelevanceFieldEnum)[keyof typeof LoginOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type BuildingWhereInput = {
    AND?: BuildingWhereInput | BuildingWhereInput[]
    OR?: BuildingWhereInput[]
    NOT?: BuildingWhereInput | BuildingWhereInput[]
    idBuilding?: IntFilter<"Building"> | number
    lat?: FloatFilter<"Building"> | number
    long?: FloatFilter<"Building"> | number
    territory_id?: IntNullableFilter<"Building"> | number | null
    last_modified?: DateTimeFilter<"Building"> | Date | string
    address?: StringNullableFilter<"Building"> | string | null
    updatedAt?: DateTimeNullableFilter<"Building"> | Date | string | null
    Territory?: XOR<TerritoryNullableScalarRelationFilter, TerritoryWhereInput> | null
    Door?: DoorListRelationFilter
  }

  export type BuildingOrderByWithRelationInput = {
    idBuilding?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    territory_id?: SortOrderInput | SortOrder
    last_modified?: SortOrder
    address?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    Territory?: TerritoryOrderByWithRelationInput
    Door?: DoorOrderByRelationAggregateInput
    _relevance?: BuildingOrderByRelevanceInput
  }

  export type BuildingWhereUniqueInput = Prisma.AtLeast<{
    idBuilding?: number
    AND?: BuildingWhereInput | BuildingWhereInput[]
    OR?: BuildingWhereInput[]
    NOT?: BuildingWhereInput | BuildingWhereInput[]
    lat?: FloatFilter<"Building"> | number
    long?: FloatFilter<"Building"> | number
    territory_id?: IntNullableFilter<"Building"> | number | null
    last_modified?: DateTimeFilter<"Building"> | Date | string
    address?: StringNullableFilter<"Building"> | string | null
    updatedAt?: DateTimeNullableFilter<"Building"> | Date | string | null
    Territory?: XOR<TerritoryNullableScalarRelationFilter, TerritoryWhereInput> | null
    Door?: DoorListRelationFilter
  }, "idBuilding">

  export type BuildingOrderByWithAggregationInput = {
    idBuilding?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    territory_id?: SortOrderInput | SortOrder
    last_modified?: SortOrder
    address?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: BuildingCountOrderByAggregateInput
    _avg?: BuildingAvgOrderByAggregateInput
    _max?: BuildingMaxOrderByAggregateInput
    _min?: BuildingMinOrderByAggregateInput
    _sum?: BuildingSumOrderByAggregateInput
  }

  export type BuildingScalarWhereWithAggregatesInput = {
    AND?: BuildingScalarWhereWithAggregatesInput | BuildingScalarWhereWithAggregatesInput[]
    OR?: BuildingScalarWhereWithAggregatesInput[]
    NOT?: BuildingScalarWhereWithAggregatesInput | BuildingScalarWhereWithAggregatesInput[]
    idBuilding?: IntWithAggregatesFilter<"Building"> | number
    lat?: FloatWithAggregatesFilter<"Building"> | number
    long?: FloatWithAggregatesFilter<"Building"> | number
    territory_id?: IntNullableWithAggregatesFilter<"Building"> | number | null
    last_modified?: DateTimeWithAggregatesFilter<"Building"> | Date | string
    address?: StringNullableWithAggregatesFilter<"Building"> | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Building"> | Date | string | null
  }

  export type CongregationWhereInput = {
    AND?: CongregationWhereInput | CongregationWhereInput[]
    OR?: CongregationWhereInput[]
    NOT?: CongregationWhereInput | CongregationWhereInput[]
    idCongregation?: IntFilter<"Congregation"> | number
    name?: StringNullableFilter<"Congregation"> | string | null
    language?: StringNullableFilter<"Congregation"> | string | null
    createdAt?: DateTimeFilter<"Congregation"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Congregation"> | Date | string | null
    Door?: DoorListRelationFilter
    Language?: LanguageListRelationFilter
    Login?: LoginListRelationFilter
    Publisher?: PublisherListRelationFilter
    Territory?: TerritoryListRelationFilter
  }

  export type CongregationOrderByWithRelationInput = {
    idCongregation?: SortOrder
    name?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    Door?: DoorOrderByRelationAggregateInput
    Language?: LanguageOrderByRelationAggregateInput
    Login?: LoginOrderByRelationAggregateInput
    Publisher?: PublisherOrderByRelationAggregateInput
    Territory?: TerritoryOrderByRelationAggregateInput
    _relevance?: CongregationOrderByRelevanceInput
  }

  export type CongregationWhereUniqueInput = Prisma.AtLeast<{
    idCongregation?: number
    AND?: CongregationWhereInput | CongregationWhereInput[]
    OR?: CongregationWhereInput[]
    NOT?: CongregationWhereInput | CongregationWhereInput[]
    name?: StringNullableFilter<"Congregation"> | string | null
    language?: StringNullableFilter<"Congregation"> | string | null
    createdAt?: DateTimeFilter<"Congregation"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Congregation"> | Date | string | null
    Door?: DoorListRelationFilter
    Language?: LanguageListRelationFilter
    Login?: LoginListRelationFilter
    Publisher?: PublisherListRelationFilter
    Territory?: TerritoryListRelationFilter
  }, "idCongregation">

  export type CongregationOrderByWithAggregationInput = {
    idCongregation?: SortOrder
    name?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: CongregationCountOrderByAggregateInput
    _avg?: CongregationAvgOrderByAggregateInput
    _max?: CongregationMaxOrderByAggregateInput
    _min?: CongregationMinOrderByAggregateInput
    _sum?: CongregationSumOrderByAggregateInput
  }

  export type CongregationScalarWhereWithAggregatesInput = {
    AND?: CongregationScalarWhereWithAggregatesInput | CongregationScalarWhereWithAggregatesInput[]
    OR?: CongregationScalarWhereWithAggregatesInput[]
    NOT?: CongregationScalarWhereWithAggregatesInput | CongregationScalarWhereWithAggregatesInput[]
    idCongregation?: IntWithAggregatesFilter<"Congregation"> | number
    name?: StringNullableWithAggregatesFilter<"Congregation"> | string | null
    language?: StringNullableWithAggregatesFilter<"Congregation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Congregation"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Congregation"> | Date | string | null
  }

  export type DoorWhereInput = {
    AND?: DoorWhereInput | DoorWhereInput[]
    OR?: DoorWhereInput[]
    NOT?: DoorWhereInput | DoorWhereInput[]
    idDoor?: IntFilter<"Door"> | number
    language?: StringNullableFilter<"Door"> | string | null
    information_name?: StringNullableFilter<"Door"> | string | null
    building_id?: IntNullableFilter<"Door"> | number | null
    id_cong_app?: IntFilter<"Door"> | number
    id_cong_lang?: IntFilter<"Door"> | number
    lastModified?: DateTimeNullableFilter<"Door"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Door"> | Date | string | null
    Building?: XOR<BuildingNullableScalarRelationFilter, BuildingWhereInput> | null
    Congregation?: XOR<CongregationScalarRelationFilter, CongregationWhereInput>
    Language?: XOR<LanguageScalarRelationFilter, LanguageWhereInput>
  }

  export type DoorOrderByWithRelationInput = {
    idDoor?: SortOrder
    language?: SortOrderInput | SortOrder
    information_name?: SortOrderInput | SortOrder
    building_id?: SortOrderInput | SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    lastModified?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    Building?: BuildingOrderByWithRelationInput
    Congregation?: CongregationOrderByWithRelationInput
    Language?: LanguageOrderByWithRelationInput
    _relevance?: DoorOrderByRelevanceInput
  }

  export type DoorWhereUniqueInput = Prisma.AtLeast<{
    idDoor?: number
    AND?: DoorWhereInput | DoorWhereInput[]
    OR?: DoorWhereInput[]
    NOT?: DoorWhereInput | DoorWhereInput[]
    language?: StringNullableFilter<"Door"> | string | null
    information_name?: StringNullableFilter<"Door"> | string | null
    building_id?: IntNullableFilter<"Door"> | number | null
    id_cong_app?: IntFilter<"Door"> | number
    id_cong_lang?: IntFilter<"Door"> | number
    lastModified?: DateTimeNullableFilter<"Door"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Door"> | Date | string | null
    Building?: XOR<BuildingNullableScalarRelationFilter, BuildingWhereInput> | null
    Congregation?: XOR<CongregationScalarRelationFilter, CongregationWhereInput>
    Language?: XOR<LanguageScalarRelationFilter, LanguageWhereInput>
  }, "idDoor">

  export type DoorOrderByWithAggregationInput = {
    idDoor?: SortOrder
    language?: SortOrderInput | SortOrder
    information_name?: SortOrderInput | SortOrder
    building_id?: SortOrderInput | SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    lastModified?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: DoorCountOrderByAggregateInput
    _avg?: DoorAvgOrderByAggregateInput
    _max?: DoorMaxOrderByAggregateInput
    _min?: DoorMinOrderByAggregateInput
    _sum?: DoorSumOrderByAggregateInput
  }

  export type DoorScalarWhereWithAggregatesInput = {
    AND?: DoorScalarWhereWithAggregatesInput | DoorScalarWhereWithAggregatesInput[]
    OR?: DoorScalarWhereWithAggregatesInput[]
    NOT?: DoorScalarWhereWithAggregatesInput | DoorScalarWhereWithAggregatesInput[]
    idDoor?: IntWithAggregatesFilter<"Door"> | number
    language?: StringNullableWithAggregatesFilter<"Door"> | string | null
    information_name?: StringNullableWithAggregatesFilter<"Door"> | string | null
    building_id?: IntNullableWithAggregatesFilter<"Door"> | number | null
    id_cong_app?: IntWithAggregatesFilter<"Door"> | number
    id_cong_lang?: IntWithAggregatesFilter<"Door"> | number
    lastModified?: DateTimeNullableWithAggregatesFilter<"Door"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Door"> | Date | string | null
  }

  export type LanguageWhereInput = {
    AND?: LanguageWhereInput | LanguageWhereInput[]
    OR?: LanguageWhereInput[]
    NOT?: LanguageWhereInput | LanguageWhereInput[]
    idLanguage?: IntFilter<"Language"> | number
    id_cong_app?: IntFilter<"Language"> | number
    id_cong_lang?: IntFilter<"Language"> | number
    name?: StringFilter<"Language"> | string
    Color?: IntNullableFilter<"Language"> | number | null
    createdAt?: DateTimeFilter<"Language"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Language"> | Date | string | null
    Door?: DoorListRelationFilter
    Congregation?: XOR<CongregationScalarRelationFilter, CongregationWhereInput>
  }

  export type LanguageOrderByWithRelationInput = {
    idLanguage?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    name?: SortOrder
    Color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    Door?: DoorOrderByRelationAggregateInput
    Congregation?: CongregationOrderByWithRelationInput
    _relevance?: LanguageOrderByRelevanceInput
  }

  export type LanguageWhereUniqueInput = Prisma.AtLeast<{
    idLanguage?: number
    AND?: LanguageWhereInput | LanguageWhereInput[]
    OR?: LanguageWhereInput[]
    NOT?: LanguageWhereInput | LanguageWhereInput[]
    id_cong_app?: IntFilter<"Language"> | number
    id_cong_lang?: IntFilter<"Language"> | number
    name?: StringFilter<"Language"> | string
    Color?: IntNullableFilter<"Language"> | number | null
    createdAt?: DateTimeFilter<"Language"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Language"> | Date | string | null
    Door?: DoorListRelationFilter
    Congregation?: XOR<CongregationScalarRelationFilter, CongregationWhereInput>
  }, "idLanguage">

  export type LanguageOrderByWithAggregationInput = {
    idLanguage?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    name?: SortOrder
    Color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: LanguageCountOrderByAggregateInput
    _avg?: LanguageAvgOrderByAggregateInput
    _max?: LanguageMaxOrderByAggregateInput
    _min?: LanguageMinOrderByAggregateInput
    _sum?: LanguageSumOrderByAggregateInput
  }

  export type LanguageScalarWhereWithAggregatesInput = {
    AND?: LanguageScalarWhereWithAggregatesInput | LanguageScalarWhereWithAggregatesInput[]
    OR?: LanguageScalarWhereWithAggregatesInput[]
    NOT?: LanguageScalarWhereWithAggregatesInput | LanguageScalarWhereWithAggregatesInput[]
    idLanguage?: IntWithAggregatesFilter<"Language"> | number
    id_cong_app?: IntWithAggregatesFilter<"Language"> | number
    id_cong_lang?: IntWithAggregatesFilter<"Language"> | number
    name?: StringWithAggregatesFilter<"Language"> | string
    Color?: IntNullableWithAggregatesFilter<"Language"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Language"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Language"> | Date | string | null
  }

  export type PublisherWhereInput = {
    AND?: PublisherWhereInput | PublisherWhereInput[]
    OR?: PublisherWhereInput[]
    NOT?: PublisherWhereInput | PublisherWhereInput[]
    idPublisher?: IntFilter<"Publisher"> | number
    name?: StringNullableFilter<"Publisher"> | string | null
    congregation_id?: IntNullableFilter<"Publisher"> | number | null
    createdAt?: DateTimeFilter<"Publisher"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Publisher"> | Date | string | null
    Congregation?: XOR<CongregationNullableScalarRelationFilter, CongregationWhereInput> | null
  }

  export type PublisherOrderByWithRelationInput = {
    idPublisher?: SortOrder
    name?: SortOrderInput | SortOrder
    congregation_id?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    Congregation?: CongregationOrderByWithRelationInput
    _relevance?: PublisherOrderByRelevanceInput
  }

  export type PublisherWhereUniqueInput = Prisma.AtLeast<{
    idPublisher?: number
    AND?: PublisherWhereInput | PublisherWhereInput[]
    OR?: PublisherWhereInput[]
    NOT?: PublisherWhereInput | PublisherWhereInput[]
    name?: StringNullableFilter<"Publisher"> | string | null
    congregation_id?: IntNullableFilter<"Publisher"> | number | null
    createdAt?: DateTimeFilter<"Publisher"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Publisher"> | Date | string | null
    Congregation?: XOR<CongregationNullableScalarRelationFilter, CongregationWhereInput> | null
  }, "idPublisher">

  export type PublisherOrderByWithAggregationInput = {
    idPublisher?: SortOrder
    name?: SortOrderInput | SortOrder
    congregation_id?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: PublisherCountOrderByAggregateInput
    _avg?: PublisherAvgOrderByAggregateInput
    _max?: PublisherMaxOrderByAggregateInput
    _min?: PublisherMinOrderByAggregateInput
    _sum?: PublisherSumOrderByAggregateInput
  }

  export type PublisherScalarWhereWithAggregatesInput = {
    AND?: PublisherScalarWhereWithAggregatesInput | PublisherScalarWhereWithAggregatesInput[]
    OR?: PublisherScalarWhereWithAggregatesInput[]
    NOT?: PublisherScalarWhereWithAggregatesInput | PublisherScalarWhereWithAggregatesInput[]
    idPublisher?: IntWithAggregatesFilter<"Publisher"> | number
    name?: StringNullableWithAggregatesFilter<"Publisher"> | string | null
    congregation_id?: IntNullableWithAggregatesFilter<"Publisher"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Publisher"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Publisher"> | Date | string | null
  }

  export type TerritoryWhereInput = {
    AND?: TerritoryWhereInput | TerritoryWhereInput[]
    OR?: TerritoryWhereInput[]
    NOT?: TerritoryWhereInput | TerritoryWhereInput[]
    idTerritory?: IntFilter<"Territory"> | number
    name?: StringNullableFilter<"Territory"> | string | null
    congregation_id?: IntNullableFilter<"Territory"> | number | null
    createdAt?: DateTimeFilter<"Territory"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Territory"> | Date | string | null
    Building?: BuildingListRelationFilter
    Congregation?: XOR<CongregationNullableScalarRelationFilter, CongregationWhereInput> | null
  }

  export type TerritoryOrderByWithRelationInput = {
    idTerritory?: SortOrder
    name?: SortOrderInput | SortOrder
    congregation_id?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    Building?: BuildingOrderByRelationAggregateInput
    Congregation?: CongregationOrderByWithRelationInput
    _relevance?: TerritoryOrderByRelevanceInput
  }

  export type TerritoryWhereUniqueInput = Prisma.AtLeast<{
    idTerritory?: number
    AND?: TerritoryWhereInput | TerritoryWhereInput[]
    OR?: TerritoryWhereInput[]
    NOT?: TerritoryWhereInput | TerritoryWhereInput[]
    name?: StringNullableFilter<"Territory"> | string | null
    congregation_id?: IntNullableFilter<"Territory"> | number | null
    createdAt?: DateTimeFilter<"Territory"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Territory"> | Date | string | null
    Building?: BuildingListRelationFilter
    Congregation?: XOR<CongregationNullableScalarRelationFilter, CongregationWhereInput> | null
  }, "idTerritory">

  export type TerritoryOrderByWithAggregationInput = {
    idTerritory?: SortOrder
    name?: SortOrderInput | SortOrder
    congregation_id?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: TerritoryCountOrderByAggregateInput
    _avg?: TerritoryAvgOrderByAggregateInput
    _max?: TerritoryMaxOrderByAggregateInput
    _min?: TerritoryMinOrderByAggregateInput
    _sum?: TerritorySumOrderByAggregateInput
  }

  export type TerritoryScalarWhereWithAggregatesInput = {
    AND?: TerritoryScalarWhereWithAggregatesInput | TerritoryScalarWhereWithAggregatesInput[]
    OR?: TerritoryScalarWhereWithAggregatesInput[]
    NOT?: TerritoryScalarWhereWithAggregatesInput | TerritoryScalarWhereWithAggregatesInput[]
    idTerritory?: IntWithAggregatesFilter<"Territory"> | number
    name?: StringNullableWithAggregatesFilter<"Territory"> | string | null
    congregation_id?: IntNullableWithAggregatesFilter<"Territory"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Territory"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Territory"> | Date | string | null
  }

  export type App1EntryWhereInput = {
    AND?: App1EntryWhereInput | App1EntryWhereInput[]
    OR?: App1EntryWhereInput[]
    NOT?: App1EntryWhereInput | App1EntryWhereInput[]
    id?: IntFilter<"App1Entry"> | number
    id_cong?: IntFilter<"App1Entry"> | number
    Gps?: StringFilter<"App1Entry"> | string
    Landmark?: StringFilter<"App1Entry"> | string
    Territory?: StringFilter<"App1Entry"> | string
    Url?: StringFilter<"App1Entry"> | string
    createdAt?: DateTimeFilter<"App1Entry"> | Date | string
    updatedAt?: DateTimeNullableFilter<"App1Entry"> | Date | string | null
  }

  export type App1EntryOrderByWithRelationInput = {
    id?: SortOrder
    id_cong?: SortOrder
    Gps?: SortOrder
    Landmark?: SortOrder
    Territory?: SortOrder
    Url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _relevance?: App1EntryOrderByRelevanceInput
  }

  export type App1EntryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: App1EntryWhereInput | App1EntryWhereInput[]
    OR?: App1EntryWhereInput[]
    NOT?: App1EntryWhereInput | App1EntryWhereInput[]
    id_cong?: IntFilter<"App1Entry"> | number
    Gps?: StringFilter<"App1Entry"> | string
    Landmark?: StringFilter<"App1Entry"> | string
    Territory?: StringFilter<"App1Entry"> | string
    Url?: StringFilter<"App1Entry"> | string
    createdAt?: DateTimeFilter<"App1Entry"> | Date | string
    updatedAt?: DateTimeNullableFilter<"App1Entry"> | Date | string | null
  }, "id">

  export type App1EntryOrderByWithAggregationInput = {
    id?: SortOrder
    id_cong?: SortOrder
    Gps?: SortOrder
    Landmark?: SortOrder
    Territory?: SortOrder
    Url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: App1EntryCountOrderByAggregateInput
    _avg?: App1EntryAvgOrderByAggregateInput
    _max?: App1EntryMaxOrderByAggregateInput
    _min?: App1EntryMinOrderByAggregateInput
    _sum?: App1EntrySumOrderByAggregateInput
  }

  export type App1EntryScalarWhereWithAggregatesInput = {
    AND?: App1EntryScalarWhereWithAggregatesInput | App1EntryScalarWhereWithAggregatesInput[]
    OR?: App1EntryScalarWhereWithAggregatesInput[]
    NOT?: App1EntryScalarWhereWithAggregatesInput | App1EntryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"App1Entry"> | number
    id_cong?: IntWithAggregatesFilter<"App1Entry"> | number
    Gps?: StringWithAggregatesFilter<"App1Entry"> | string
    Landmark?: StringWithAggregatesFilter<"App1Entry"> | string
    Territory?: StringWithAggregatesFilter<"App1Entry"> | string
    Url?: StringWithAggregatesFilter<"App1Entry"> | string
    createdAt?: DateTimeWithAggregatesFilter<"App1Entry"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"App1Entry"> | Date | string | null
  }

  export type LoginWhereInput = {
    AND?: LoginWhereInput | LoginWhereInput[]
    OR?: LoginWhereInput[]
    NOT?: LoginWhereInput | LoginWhereInput[]
    id?: IntFilter<"Login"> | number
    name?: StringFilter<"Login"> | string
    email?: StringFilter<"Login"> | string
    password?: StringNullableFilter<"Login"> | string | null
    googleSignIn?: BoolFilter<"Login"> | boolean
    whatsapp?: StringFilter<"Login"> | string
    congregationNumber?: IntFilter<"Login"> | number
    createdAt?: DateTimeFilter<"Login"> | Date | string
    updatedAt?: DateTimeFilter<"Login"> | Date | string
    loginCount?: IntFilter<"Login"> | number
    Congregation?: XOR<CongregationScalarRelationFilter, CongregationWhereInput>
  }

  export type LoginOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    googleSignIn?: SortOrder
    whatsapp?: SortOrder
    congregationNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginCount?: SortOrder
    Congregation?: CongregationOrderByWithRelationInput
    _relevance?: LoginOrderByRelevanceInput
  }

  export type LoginWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: LoginWhereInput | LoginWhereInput[]
    OR?: LoginWhereInput[]
    NOT?: LoginWhereInput | LoginWhereInput[]
    name?: StringFilter<"Login"> | string
    password?: StringNullableFilter<"Login"> | string | null
    googleSignIn?: BoolFilter<"Login"> | boolean
    whatsapp?: StringFilter<"Login"> | string
    congregationNumber?: IntFilter<"Login"> | number
    createdAt?: DateTimeFilter<"Login"> | Date | string
    updatedAt?: DateTimeFilter<"Login"> | Date | string
    loginCount?: IntFilter<"Login"> | number
    Congregation?: XOR<CongregationScalarRelationFilter, CongregationWhereInput>
  }, "id" | "email">

  export type LoginOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    googleSignIn?: SortOrder
    whatsapp?: SortOrder
    congregationNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginCount?: SortOrder
    _count?: LoginCountOrderByAggregateInput
    _avg?: LoginAvgOrderByAggregateInput
    _max?: LoginMaxOrderByAggregateInput
    _min?: LoginMinOrderByAggregateInput
    _sum?: LoginSumOrderByAggregateInput
  }

  export type LoginScalarWhereWithAggregatesInput = {
    AND?: LoginScalarWhereWithAggregatesInput | LoginScalarWhereWithAggregatesInput[]
    OR?: LoginScalarWhereWithAggregatesInput[]
    NOT?: LoginScalarWhereWithAggregatesInput | LoginScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Login"> | number
    name?: StringWithAggregatesFilter<"Login"> | string
    email?: StringWithAggregatesFilter<"Login"> | string
    password?: StringNullableWithAggregatesFilter<"Login"> | string | null
    googleSignIn?: BoolWithAggregatesFilter<"Login"> | boolean
    whatsapp?: StringWithAggregatesFilter<"Login"> | string
    congregationNumber?: IntWithAggregatesFilter<"Login"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Login"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Login"> | Date | string
    loginCount?: IntWithAggregatesFilter<"Login"> | number
  }

  export type BuildingCreateInput = {
    lat: number
    long: number
    last_modified?: Date | string
    address?: string | null
    updatedAt?: Date | string | null
    Territory?: TerritoryCreateNestedOneWithoutBuildingInput
    Door?: DoorCreateNestedManyWithoutBuildingInput
  }

  export type BuildingUncheckedCreateInput = {
    idBuilding?: number
    lat: number
    long: number
    territory_id?: number | null
    last_modified?: Date | string
    address?: string | null
    updatedAt?: Date | string | null
    Door?: DoorUncheckedCreateNestedManyWithoutBuildingInput
  }

  export type BuildingUpdateInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Territory?: TerritoryUpdateOneWithoutBuildingNestedInput
    Door?: DoorUpdateManyWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateInput = {
    idBuilding?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    territory_id?: NullableIntFieldUpdateOperationsInput | number | null
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUncheckedUpdateManyWithoutBuildingNestedInput
  }

  export type BuildingCreateManyInput = {
    idBuilding?: number
    lat: number
    long: number
    territory_id?: number | null
    last_modified?: Date | string
    address?: string | null
    updatedAt?: Date | string | null
  }

  export type BuildingUpdateManyMutationInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BuildingUncheckedUpdateManyInput = {
    idBuilding?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    territory_id?: NullableIntFieldUpdateOperationsInput | number | null
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CongregationCreateInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorCreateNestedManyWithoutCongregationInput
    Language?: LanguageCreateNestedManyWithoutCongregationInput
    Login?: LoginCreateNestedManyWithoutCongregationInput
    Publisher?: PublisherCreateNestedManyWithoutCongregationInput
    Territory?: TerritoryCreateNestedManyWithoutCongregationInput
  }

  export type CongregationUncheckedCreateInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorUncheckedCreateNestedManyWithoutCongregationInput
    Language?: LanguageUncheckedCreateNestedManyWithoutCongregationInput
    Login?: LoginUncheckedCreateNestedManyWithoutCongregationInput
    Publisher?: PublisherUncheckedCreateNestedManyWithoutCongregationInput
    Territory?: TerritoryUncheckedCreateNestedManyWithoutCongregationInput
  }

  export type CongregationUpdateInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUpdateManyWithoutCongregationNestedInput
    Language?: LanguageUpdateManyWithoutCongregationNestedInput
    Login?: LoginUpdateManyWithoutCongregationNestedInput
    Publisher?: PublisherUpdateManyWithoutCongregationNestedInput
    Territory?: TerritoryUpdateManyWithoutCongregationNestedInput
  }

  export type CongregationUncheckedUpdateInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUncheckedUpdateManyWithoutCongregationNestedInput
    Language?: LanguageUncheckedUpdateManyWithoutCongregationNestedInput
    Login?: LoginUncheckedUpdateManyWithoutCongregationNestedInput
    Publisher?: PublisherUncheckedUpdateManyWithoutCongregationNestedInput
    Territory?: TerritoryUncheckedUpdateManyWithoutCongregationNestedInput
  }

  export type CongregationCreateManyInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type CongregationUpdateManyMutationInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CongregationUncheckedUpdateManyInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoorCreateInput = {
    language?: string | null
    information_name?: string | null
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
    Building?: BuildingCreateNestedOneWithoutDoorInput
    Congregation: CongregationCreateNestedOneWithoutDoorInput
    Language: LanguageCreateNestedOneWithoutDoorInput
  }

  export type DoorUncheckedCreateInput = {
    idDoor?: number
    language?: string | null
    information_name?: string | null
    building_id?: number | null
    id_cong_app: number
    id_cong_lang: number
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type DoorUpdateInput = {
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Building?: BuildingUpdateOneWithoutDoorNestedInput
    Congregation?: CongregationUpdateOneRequiredWithoutDoorNestedInput
    Language?: LanguageUpdateOneRequiredWithoutDoorNestedInput
  }

  export type DoorUncheckedUpdateInput = {
    idDoor?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    building_id?: NullableIntFieldUpdateOperationsInput | number | null
    id_cong_app?: IntFieldUpdateOperationsInput | number
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoorCreateManyInput = {
    idDoor?: number
    language?: string | null
    information_name?: string | null
    building_id?: number | null
    id_cong_app: number
    id_cong_lang: number
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type DoorUpdateManyMutationInput = {
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoorUncheckedUpdateManyInput = {
    idDoor?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    building_id?: NullableIntFieldUpdateOperationsInput | number | null
    id_cong_app?: IntFieldUpdateOperationsInput | number
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LanguageCreateInput = {
    id_cong_lang: number
    name: string
    Color?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorCreateNestedManyWithoutLanguageInput
    Congregation: CongregationCreateNestedOneWithoutLanguageInput
  }

  export type LanguageUncheckedCreateInput = {
    idLanguage?: number
    id_cong_app: number
    id_cong_lang: number
    name: string
    Color?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorUncheckedCreateNestedManyWithoutLanguageInput
  }

  export type LanguageUpdateInput = {
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Color?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUpdateManyWithoutLanguageNestedInput
    Congregation?: CongregationUpdateOneRequiredWithoutLanguageNestedInput
  }

  export type LanguageUncheckedUpdateInput = {
    idLanguage?: IntFieldUpdateOperationsInput | number
    id_cong_app?: IntFieldUpdateOperationsInput | number
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Color?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUncheckedUpdateManyWithoutLanguageNestedInput
  }

  export type LanguageCreateManyInput = {
    idLanguage?: number
    id_cong_app: number
    id_cong_lang: number
    name: string
    Color?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type LanguageUpdateManyMutationInput = {
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Color?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LanguageUncheckedUpdateManyInput = {
    idLanguage?: IntFieldUpdateOperationsInput | number
    id_cong_app?: IntFieldUpdateOperationsInput | number
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Color?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PublisherCreateInput = {
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Congregation?: CongregationCreateNestedOneWithoutPublisherInput
  }

  export type PublisherUncheckedCreateInput = {
    idPublisher?: number
    name?: string | null
    congregation_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PublisherUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Congregation?: CongregationUpdateOneWithoutPublisherNestedInput
  }

  export type PublisherUncheckedUpdateInput = {
    idPublisher?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    congregation_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PublisherCreateManyInput = {
    idPublisher?: number
    name?: string | null
    congregation_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PublisherUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PublisherUncheckedUpdateManyInput = {
    idPublisher?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    congregation_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TerritoryCreateInput = {
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Building?: BuildingCreateNestedManyWithoutTerritoryInput
    Congregation?: CongregationCreateNestedOneWithoutTerritoryInput
  }

  export type TerritoryUncheckedCreateInput = {
    idTerritory?: number
    name?: string | null
    congregation_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Building?: BuildingUncheckedCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Building?: BuildingUpdateManyWithoutTerritoryNestedInput
    Congregation?: CongregationUpdateOneWithoutTerritoryNestedInput
  }

  export type TerritoryUncheckedUpdateInput = {
    idTerritory?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    congregation_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Building?: BuildingUncheckedUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryCreateManyInput = {
    idTerritory?: number
    name?: string | null
    congregation_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type TerritoryUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TerritoryUncheckedUpdateManyInput = {
    idTerritory?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    congregation_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type App1EntryCreateInput = {
    id_cong: number
    Gps: string
    Landmark: string
    Territory: string
    Url: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type App1EntryUncheckedCreateInput = {
    id?: number
    id_cong: number
    Gps: string
    Landmark: string
    Territory: string
    Url: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type App1EntryUpdateInput = {
    id_cong?: IntFieldUpdateOperationsInput | number
    Gps?: StringFieldUpdateOperationsInput | string
    Landmark?: StringFieldUpdateOperationsInput | string
    Territory?: StringFieldUpdateOperationsInput | string
    Url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type App1EntryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_cong?: IntFieldUpdateOperationsInput | number
    Gps?: StringFieldUpdateOperationsInput | string
    Landmark?: StringFieldUpdateOperationsInput | string
    Territory?: StringFieldUpdateOperationsInput | string
    Url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type App1EntryCreateManyInput = {
    id?: number
    id_cong: number
    Gps: string
    Landmark: string
    Territory: string
    Url: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type App1EntryUpdateManyMutationInput = {
    id_cong?: IntFieldUpdateOperationsInput | number
    Gps?: StringFieldUpdateOperationsInput | string
    Landmark?: StringFieldUpdateOperationsInput | string
    Territory?: StringFieldUpdateOperationsInput | string
    Url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type App1EntryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_cong?: IntFieldUpdateOperationsInput | number
    Gps?: StringFieldUpdateOperationsInput | string
    Landmark?: StringFieldUpdateOperationsInput | string
    Territory?: StringFieldUpdateOperationsInput | string
    Url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoginCreateInput = {
    name: string
    email: string
    password?: string | null
    googleSignIn?: boolean
    whatsapp: string
    createdAt?: Date | string
    updatedAt?: Date | string
    loginCount?: number
    Congregation: CongregationCreateNestedOneWithoutLoginInput
  }

  export type LoginUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password?: string | null
    googleSignIn?: boolean
    whatsapp: string
    congregationNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    loginCount?: number
  }

  export type LoginUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleSignIn?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginCount?: IntFieldUpdateOperationsInput | number
    Congregation?: CongregationUpdateOneRequiredWithoutLoginNestedInput
  }

  export type LoginUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleSignIn?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: StringFieldUpdateOperationsInput | string
    congregationNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginCount?: IntFieldUpdateOperationsInput | number
  }

  export type LoginCreateManyInput = {
    id?: number
    name: string
    email: string
    password?: string | null
    googleSignIn?: boolean
    whatsapp: string
    congregationNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    loginCount?: number
  }

  export type LoginUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleSignIn?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginCount?: IntFieldUpdateOperationsInput | number
  }

  export type LoginUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleSignIn?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: StringFieldUpdateOperationsInput | string
    congregationNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginCount?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type TerritoryNullableScalarRelationFilter = {
    is?: TerritoryWhereInput | null
    isNot?: TerritoryWhereInput | null
  }

  export type DoorListRelationFilter = {
    every?: DoorWhereInput
    some?: DoorWhereInput
    none?: DoorWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DoorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuildingOrderByRelevanceInput = {
    fields: BuildingOrderByRelevanceFieldEnum | BuildingOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BuildingCountOrderByAggregateInput = {
    idBuilding?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    territory_id?: SortOrder
    last_modified?: SortOrder
    address?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuildingAvgOrderByAggregateInput = {
    idBuilding?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    territory_id?: SortOrder
  }

  export type BuildingMaxOrderByAggregateInput = {
    idBuilding?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    territory_id?: SortOrder
    last_modified?: SortOrder
    address?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuildingMinOrderByAggregateInput = {
    idBuilding?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    territory_id?: SortOrder
    last_modified?: SortOrder
    address?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuildingSumOrderByAggregateInput = {
    idBuilding?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    territory_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type LanguageListRelationFilter = {
    every?: LanguageWhereInput
    some?: LanguageWhereInput
    none?: LanguageWhereInput
  }

  export type LoginListRelationFilter = {
    every?: LoginWhereInput
    some?: LoginWhereInput
    none?: LoginWhereInput
  }

  export type PublisherListRelationFilter = {
    every?: PublisherWhereInput
    some?: PublisherWhereInput
    none?: PublisherWhereInput
  }

  export type TerritoryListRelationFilter = {
    every?: TerritoryWhereInput
    some?: TerritoryWhereInput
    none?: TerritoryWhereInput
  }

  export type LanguageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoginOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PublisherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TerritoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CongregationOrderByRelevanceInput = {
    fields: CongregationOrderByRelevanceFieldEnum | CongregationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CongregationCountOrderByAggregateInput = {
    idCongregation?: SortOrder
    name?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CongregationAvgOrderByAggregateInput = {
    idCongregation?: SortOrder
  }

  export type CongregationMaxOrderByAggregateInput = {
    idCongregation?: SortOrder
    name?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CongregationMinOrderByAggregateInput = {
    idCongregation?: SortOrder
    name?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CongregationSumOrderByAggregateInput = {
    idCongregation?: SortOrder
  }

  export type BuildingNullableScalarRelationFilter = {
    is?: BuildingWhereInput | null
    isNot?: BuildingWhereInput | null
  }

  export type CongregationScalarRelationFilter = {
    is?: CongregationWhereInput
    isNot?: CongregationWhereInput
  }

  export type LanguageScalarRelationFilter = {
    is?: LanguageWhereInput
    isNot?: LanguageWhereInput
  }

  export type DoorOrderByRelevanceInput = {
    fields: DoorOrderByRelevanceFieldEnum | DoorOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DoorCountOrderByAggregateInput = {
    idDoor?: SortOrder
    language?: SortOrder
    information_name?: SortOrder
    building_id?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    lastModified?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoorAvgOrderByAggregateInput = {
    idDoor?: SortOrder
    building_id?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
  }

  export type DoorMaxOrderByAggregateInput = {
    idDoor?: SortOrder
    language?: SortOrder
    information_name?: SortOrder
    building_id?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    lastModified?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoorMinOrderByAggregateInput = {
    idDoor?: SortOrder
    language?: SortOrder
    information_name?: SortOrder
    building_id?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    lastModified?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoorSumOrderByAggregateInput = {
    idDoor?: SortOrder
    building_id?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type LanguageOrderByRelevanceInput = {
    fields: LanguageOrderByRelevanceFieldEnum | LanguageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LanguageCountOrderByAggregateInput = {
    idLanguage?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    name?: SortOrder
    Color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguageAvgOrderByAggregateInput = {
    idLanguage?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    Color?: SortOrder
  }

  export type LanguageMaxOrderByAggregateInput = {
    idLanguage?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    name?: SortOrder
    Color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguageMinOrderByAggregateInput = {
    idLanguage?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    name?: SortOrder
    Color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguageSumOrderByAggregateInput = {
    idLanguage?: SortOrder
    id_cong_app?: SortOrder
    id_cong_lang?: SortOrder
    Color?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type CongregationNullableScalarRelationFilter = {
    is?: CongregationWhereInput | null
    isNot?: CongregationWhereInput | null
  }

  export type PublisherOrderByRelevanceInput = {
    fields: PublisherOrderByRelevanceFieldEnum | PublisherOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PublisherCountOrderByAggregateInput = {
    idPublisher?: SortOrder
    name?: SortOrder
    congregation_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublisherAvgOrderByAggregateInput = {
    idPublisher?: SortOrder
    congregation_id?: SortOrder
  }

  export type PublisherMaxOrderByAggregateInput = {
    idPublisher?: SortOrder
    name?: SortOrder
    congregation_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublisherMinOrderByAggregateInput = {
    idPublisher?: SortOrder
    name?: SortOrder
    congregation_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublisherSumOrderByAggregateInput = {
    idPublisher?: SortOrder
    congregation_id?: SortOrder
  }

  export type BuildingListRelationFilter = {
    every?: BuildingWhereInput
    some?: BuildingWhereInput
    none?: BuildingWhereInput
  }

  export type BuildingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TerritoryOrderByRelevanceInput = {
    fields: TerritoryOrderByRelevanceFieldEnum | TerritoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TerritoryCountOrderByAggregateInput = {
    idTerritory?: SortOrder
    name?: SortOrder
    congregation_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TerritoryAvgOrderByAggregateInput = {
    idTerritory?: SortOrder
    congregation_id?: SortOrder
  }

  export type TerritoryMaxOrderByAggregateInput = {
    idTerritory?: SortOrder
    name?: SortOrder
    congregation_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TerritoryMinOrderByAggregateInput = {
    idTerritory?: SortOrder
    name?: SortOrder
    congregation_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TerritorySumOrderByAggregateInput = {
    idTerritory?: SortOrder
    congregation_id?: SortOrder
  }

  export type App1EntryOrderByRelevanceInput = {
    fields: App1EntryOrderByRelevanceFieldEnum | App1EntryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type App1EntryCountOrderByAggregateInput = {
    id?: SortOrder
    id_cong?: SortOrder
    Gps?: SortOrder
    Landmark?: SortOrder
    Territory?: SortOrder
    Url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type App1EntryAvgOrderByAggregateInput = {
    id?: SortOrder
    id_cong?: SortOrder
  }

  export type App1EntryMaxOrderByAggregateInput = {
    id?: SortOrder
    id_cong?: SortOrder
    Gps?: SortOrder
    Landmark?: SortOrder
    Territory?: SortOrder
    Url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type App1EntryMinOrderByAggregateInput = {
    id?: SortOrder
    id_cong?: SortOrder
    Gps?: SortOrder
    Landmark?: SortOrder
    Territory?: SortOrder
    Url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type App1EntrySumOrderByAggregateInput = {
    id?: SortOrder
    id_cong?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type LoginOrderByRelevanceInput = {
    fields: LoginOrderByRelevanceFieldEnum | LoginOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LoginCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    googleSignIn?: SortOrder
    whatsapp?: SortOrder
    congregationNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginCount?: SortOrder
  }

  export type LoginAvgOrderByAggregateInput = {
    id?: SortOrder
    congregationNumber?: SortOrder
    loginCount?: SortOrder
  }

  export type LoginMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    googleSignIn?: SortOrder
    whatsapp?: SortOrder
    congregationNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginCount?: SortOrder
  }

  export type LoginMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    googleSignIn?: SortOrder
    whatsapp?: SortOrder
    congregationNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginCount?: SortOrder
  }

  export type LoginSumOrderByAggregateInput = {
    id?: SortOrder
    congregationNumber?: SortOrder
    loginCount?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TerritoryCreateNestedOneWithoutBuildingInput = {
    create?: XOR<TerritoryCreateWithoutBuildingInput, TerritoryUncheckedCreateWithoutBuildingInput>
    connectOrCreate?: TerritoryCreateOrConnectWithoutBuildingInput
    connect?: TerritoryWhereUniqueInput
  }

  export type DoorCreateNestedManyWithoutBuildingInput = {
    create?: XOR<DoorCreateWithoutBuildingInput, DoorUncheckedCreateWithoutBuildingInput> | DoorCreateWithoutBuildingInput[] | DoorUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutBuildingInput | DoorCreateOrConnectWithoutBuildingInput[]
    createMany?: DoorCreateManyBuildingInputEnvelope
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
  }

  export type DoorUncheckedCreateNestedManyWithoutBuildingInput = {
    create?: XOR<DoorCreateWithoutBuildingInput, DoorUncheckedCreateWithoutBuildingInput> | DoorCreateWithoutBuildingInput[] | DoorUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutBuildingInput | DoorCreateOrConnectWithoutBuildingInput[]
    createMany?: DoorCreateManyBuildingInputEnvelope
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type TerritoryUpdateOneWithoutBuildingNestedInput = {
    create?: XOR<TerritoryCreateWithoutBuildingInput, TerritoryUncheckedCreateWithoutBuildingInput>
    connectOrCreate?: TerritoryCreateOrConnectWithoutBuildingInput
    upsert?: TerritoryUpsertWithoutBuildingInput
    disconnect?: TerritoryWhereInput | boolean
    delete?: TerritoryWhereInput | boolean
    connect?: TerritoryWhereUniqueInput
    update?: XOR<XOR<TerritoryUpdateToOneWithWhereWithoutBuildingInput, TerritoryUpdateWithoutBuildingInput>, TerritoryUncheckedUpdateWithoutBuildingInput>
  }

  export type DoorUpdateManyWithoutBuildingNestedInput = {
    create?: XOR<DoorCreateWithoutBuildingInput, DoorUncheckedCreateWithoutBuildingInput> | DoorCreateWithoutBuildingInput[] | DoorUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutBuildingInput | DoorCreateOrConnectWithoutBuildingInput[]
    upsert?: DoorUpsertWithWhereUniqueWithoutBuildingInput | DoorUpsertWithWhereUniqueWithoutBuildingInput[]
    createMany?: DoorCreateManyBuildingInputEnvelope
    set?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    disconnect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    delete?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    update?: DoorUpdateWithWhereUniqueWithoutBuildingInput | DoorUpdateWithWhereUniqueWithoutBuildingInput[]
    updateMany?: DoorUpdateManyWithWhereWithoutBuildingInput | DoorUpdateManyWithWhereWithoutBuildingInput[]
    deleteMany?: DoorScalarWhereInput | DoorScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DoorUncheckedUpdateManyWithoutBuildingNestedInput = {
    create?: XOR<DoorCreateWithoutBuildingInput, DoorUncheckedCreateWithoutBuildingInput> | DoorCreateWithoutBuildingInput[] | DoorUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutBuildingInput | DoorCreateOrConnectWithoutBuildingInput[]
    upsert?: DoorUpsertWithWhereUniqueWithoutBuildingInput | DoorUpsertWithWhereUniqueWithoutBuildingInput[]
    createMany?: DoorCreateManyBuildingInputEnvelope
    set?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    disconnect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    delete?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    update?: DoorUpdateWithWhereUniqueWithoutBuildingInput | DoorUpdateWithWhereUniqueWithoutBuildingInput[]
    updateMany?: DoorUpdateManyWithWhereWithoutBuildingInput | DoorUpdateManyWithWhereWithoutBuildingInput[]
    deleteMany?: DoorScalarWhereInput | DoorScalarWhereInput[]
  }

  export type DoorCreateNestedManyWithoutCongregationInput = {
    create?: XOR<DoorCreateWithoutCongregationInput, DoorUncheckedCreateWithoutCongregationInput> | DoorCreateWithoutCongregationInput[] | DoorUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutCongregationInput | DoorCreateOrConnectWithoutCongregationInput[]
    createMany?: DoorCreateManyCongregationInputEnvelope
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
  }

  export type LanguageCreateNestedManyWithoutCongregationInput = {
    create?: XOR<LanguageCreateWithoutCongregationInput, LanguageUncheckedCreateWithoutCongregationInput> | LanguageCreateWithoutCongregationInput[] | LanguageUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutCongregationInput | LanguageCreateOrConnectWithoutCongregationInput[]
    createMany?: LanguageCreateManyCongregationInputEnvelope
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
  }

  export type LoginCreateNestedManyWithoutCongregationInput = {
    create?: XOR<LoginCreateWithoutCongregationInput, LoginUncheckedCreateWithoutCongregationInput> | LoginCreateWithoutCongregationInput[] | LoginUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: LoginCreateOrConnectWithoutCongregationInput | LoginCreateOrConnectWithoutCongregationInput[]
    createMany?: LoginCreateManyCongregationInputEnvelope
    connect?: LoginWhereUniqueInput | LoginWhereUniqueInput[]
  }

  export type PublisherCreateNestedManyWithoutCongregationInput = {
    create?: XOR<PublisherCreateWithoutCongregationInput, PublisherUncheckedCreateWithoutCongregationInput> | PublisherCreateWithoutCongregationInput[] | PublisherUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: PublisherCreateOrConnectWithoutCongregationInput | PublisherCreateOrConnectWithoutCongregationInput[]
    createMany?: PublisherCreateManyCongregationInputEnvelope
    connect?: PublisherWhereUniqueInput | PublisherWhereUniqueInput[]
  }

  export type TerritoryCreateNestedManyWithoutCongregationInput = {
    create?: XOR<TerritoryCreateWithoutCongregationInput, TerritoryUncheckedCreateWithoutCongregationInput> | TerritoryCreateWithoutCongregationInput[] | TerritoryUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: TerritoryCreateOrConnectWithoutCongregationInput | TerritoryCreateOrConnectWithoutCongregationInput[]
    createMany?: TerritoryCreateManyCongregationInputEnvelope
    connect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
  }

  export type DoorUncheckedCreateNestedManyWithoutCongregationInput = {
    create?: XOR<DoorCreateWithoutCongregationInput, DoorUncheckedCreateWithoutCongregationInput> | DoorCreateWithoutCongregationInput[] | DoorUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutCongregationInput | DoorCreateOrConnectWithoutCongregationInput[]
    createMany?: DoorCreateManyCongregationInputEnvelope
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
  }

  export type LanguageUncheckedCreateNestedManyWithoutCongregationInput = {
    create?: XOR<LanguageCreateWithoutCongregationInput, LanguageUncheckedCreateWithoutCongregationInput> | LanguageCreateWithoutCongregationInput[] | LanguageUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutCongregationInput | LanguageCreateOrConnectWithoutCongregationInput[]
    createMany?: LanguageCreateManyCongregationInputEnvelope
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
  }

  export type LoginUncheckedCreateNestedManyWithoutCongregationInput = {
    create?: XOR<LoginCreateWithoutCongregationInput, LoginUncheckedCreateWithoutCongregationInput> | LoginCreateWithoutCongregationInput[] | LoginUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: LoginCreateOrConnectWithoutCongregationInput | LoginCreateOrConnectWithoutCongregationInput[]
    createMany?: LoginCreateManyCongregationInputEnvelope
    connect?: LoginWhereUniqueInput | LoginWhereUniqueInput[]
  }

  export type PublisherUncheckedCreateNestedManyWithoutCongregationInput = {
    create?: XOR<PublisherCreateWithoutCongregationInput, PublisherUncheckedCreateWithoutCongregationInput> | PublisherCreateWithoutCongregationInput[] | PublisherUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: PublisherCreateOrConnectWithoutCongregationInput | PublisherCreateOrConnectWithoutCongregationInput[]
    createMany?: PublisherCreateManyCongregationInputEnvelope
    connect?: PublisherWhereUniqueInput | PublisherWhereUniqueInput[]
  }

  export type TerritoryUncheckedCreateNestedManyWithoutCongregationInput = {
    create?: XOR<TerritoryCreateWithoutCongregationInput, TerritoryUncheckedCreateWithoutCongregationInput> | TerritoryCreateWithoutCongregationInput[] | TerritoryUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: TerritoryCreateOrConnectWithoutCongregationInput | TerritoryCreateOrConnectWithoutCongregationInput[]
    createMany?: TerritoryCreateManyCongregationInputEnvelope
    connect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
  }

  export type DoorUpdateManyWithoutCongregationNestedInput = {
    create?: XOR<DoorCreateWithoutCongregationInput, DoorUncheckedCreateWithoutCongregationInput> | DoorCreateWithoutCongregationInput[] | DoorUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutCongregationInput | DoorCreateOrConnectWithoutCongregationInput[]
    upsert?: DoorUpsertWithWhereUniqueWithoutCongregationInput | DoorUpsertWithWhereUniqueWithoutCongregationInput[]
    createMany?: DoorCreateManyCongregationInputEnvelope
    set?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    disconnect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    delete?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    update?: DoorUpdateWithWhereUniqueWithoutCongregationInput | DoorUpdateWithWhereUniqueWithoutCongregationInput[]
    updateMany?: DoorUpdateManyWithWhereWithoutCongregationInput | DoorUpdateManyWithWhereWithoutCongregationInput[]
    deleteMany?: DoorScalarWhereInput | DoorScalarWhereInput[]
  }

  export type LanguageUpdateManyWithoutCongregationNestedInput = {
    create?: XOR<LanguageCreateWithoutCongregationInput, LanguageUncheckedCreateWithoutCongregationInput> | LanguageCreateWithoutCongregationInput[] | LanguageUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutCongregationInput | LanguageCreateOrConnectWithoutCongregationInput[]
    upsert?: LanguageUpsertWithWhereUniqueWithoutCongregationInput | LanguageUpsertWithWhereUniqueWithoutCongregationInput[]
    createMany?: LanguageCreateManyCongregationInputEnvelope
    set?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    disconnect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    delete?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    update?: LanguageUpdateWithWhereUniqueWithoutCongregationInput | LanguageUpdateWithWhereUniqueWithoutCongregationInput[]
    updateMany?: LanguageUpdateManyWithWhereWithoutCongregationInput | LanguageUpdateManyWithWhereWithoutCongregationInput[]
    deleteMany?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
  }

  export type LoginUpdateManyWithoutCongregationNestedInput = {
    create?: XOR<LoginCreateWithoutCongregationInput, LoginUncheckedCreateWithoutCongregationInput> | LoginCreateWithoutCongregationInput[] | LoginUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: LoginCreateOrConnectWithoutCongregationInput | LoginCreateOrConnectWithoutCongregationInput[]
    upsert?: LoginUpsertWithWhereUniqueWithoutCongregationInput | LoginUpsertWithWhereUniqueWithoutCongregationInput[]
    createMany?: LoginCreateManyCongregationInputEnvelope
    set?: LoginWhereUniqueInput | LoginWhereUniqueInput[]
    disconnect?: LoginWhereUniqueInput | LoginWhereUniqueInput[]
    delete?: LoginWhereUniqueInput | LoginWhereUniqueInput[]
    connect?: LoginWhereUniqueInput | LoginWhereUniqueInput[]
    update?: LoginUpdateWithWhereUniqueWithoutCongregationInput | LoginUpdateWithWhereUniqueWithoutCongregationInput[]
    updateMany?: LoginUpdateManyWithWhereWithoutCongregationInput | LoginUpdateManyWithWhereWithoutCongregationInput[]
    deleteMany?: LoginScalarWhereInput | LoginScalarWhereInput[]
  }

  export type PublisherUpdateManyWithoutCongregationNestedInput = {
    create?: XOR<PublisherCreateWithoutCongregationInput, PublisherUncheckedCreateWithoutCongregationInput> | PublisherCreateWithoutCongregationInput[] | PublisherUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: PublisherCreateOrConnectWithoutCongregationInput | PublisherCreateOrConnectWithoutCongregationInput[]
    upsert?: PublisherUpsertWithWhereUniqueWithoutCongregationInput | PublisherUpsertWithWhereUniqueWithoutCongregationInput[]
    createMany?: PublisherCreateManyCongregationInputEnvelope
    set?: PublisherWhereUniqueInput | PublisherWhereUniqueInput[]
    disconnect?: PublisherWhereUniqueInput | PublisherWhereUniqueInput[]
    delete?: PublisherWhereUniqueInput | PublisherWhereUniqueInput[]
    connect?: PublisherWhereUniqueInput | PublisherWhereUniqueInput[]
    update?: PublisherUpdateWithWhereUniqueWithoutCongregationInput | PublisherUpdateWithWhereUniqueWithoutCongregationInput[]
    updateMany?: PublisherUpdateManyWithWhereWithoutCongregationInput | PublisherUpdateManyWithWhereWithoutCongregationInput[]
    deleteMany?: PublisherScalarWhereInput | PublisherScalarWhereInput[]
  }

  export type TerritoryUpdateManyWithoutCongregationNestedInput = {
    create?: XOR<TerritoryCreateWithoutCongregationInput, TerritoryUncheckedCreateWithoutCongregationInput> | TerritoryCreateWithoutCongregationInput[] | TerritoryUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: TerritoryCreateOrConnectWithoutCongregationInput | TerritoryCreateOrConnectWithoutCongregationInput[]
    upsert?: TerritoryUpsertWithWhereUniqueWithoutCongregationInput | TerritoryUpsertWithWhereUniqueWithoutCongregationInput[]
    createMany?: TerritoryCreateManyCongregationInputEnvelope
    set?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    disconnect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    delete?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    connect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    update?: TerritoryUpdateWithWhereUniqueWithoutCongregationInput | TerritoryUpdateWithWhereUniqueWithoutCongregationInput[]
    updateMany?: TerritoryUpdateManyWithWhereWithoutCongregationInput | TerritoryUpdateManyWithWhereWithoutCongregationInput[]
    deleteMany?: TerritoryScalarWhereInput | TerritoryScalarWhereInput[]
  }

  export type DoorUncheckedUpdateManyWithoutCongregationNestedInput = {
    create?: XOR<DoorCreateWithoutCongregationInput, DoorUncheckedCreateWithoutCongregationInput> | DoorCreateWithoutCongregationInput[] | DoorUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutCongregationInput | DoorCreateOrConnectWithoutCongregationInput[]
    upsert?: DoorUpsertWithWhereUniqueWithoutCongregationInput | DoorUpsertWithWhereUniqueWithoutCongregationInput[]
    createMany?: DoorCreateManyCongregationInputEnvelope
    set?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    disconnect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    delete?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    update?: DoorUpdateWithWhereUniqueWithoutCongregationInput | DoorUpdateWithWhereUniqueWithoutCongregationInput[]
    updateMany?: DoorUpdateManyWithWhereWithoutCongregationInput | DoorUpdateManyWithWhereWithoutCongregationInput[]
    deleteMany?: DoorScalarWhereInput | DoorScalarWhereInput[]
  }

  export type LanguageUncheckedUpdateManyWithoutCongregationNestedInput = {
    create?: XOR<LanguageCreateWithoutCongregationInput, LanguageUncheckedCreateWithoutCongregationInput> | LanguageCreateWithoutCongregationInput[] | LanguageUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutCongregationInput | LanguageCreateOrConnectWithoutCongregationInput[]
    upsert?: LanguageUpsertWithWhereUniqueWithoutCongregationInput | LanguageUpsertWithWhereUniqueWithoutCongregationInput[]
    createMany?: LanguageCreateManyCongregationInputEnvelope
    set?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    disconnect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    delete?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    update?: LanguageUpdateWithWhereUniqueWithoutCongregationInput | LanguageUpdateWithWhereUniqueWithoutCongregationInput[]
    updateMany?: LanguageUpdateManyWithWhereWithoutCongregationInput | LanguageUpdateManyWithWhereWithoutCongregationInput[]
    deleteMany?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
  }

  export type LoginUncheckedUpdateManyWithoutCongregationNestedInput = {
    create?: XOR<LoginCreateWithoutCongregationInput, LoginUncheckedCreateWithoutCongregationInput> | LoginCreateWithoutCongregationInput[] | LoginUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: LoginCreateOrConnectWithoutCongregationInput | LoginCreateOrConnectWithoutCongregationInput[]
    upsert?: LoginUpsertWithWhereUniqueWithoutCongregationInput | LoginUpsertWithWhereUniqueWithoutCongregationInput[]
    createMany?: LoginCreateManyCongregationInputEnvelope
    set?: LoginWhereUniqueInput | LoginWhereUniqueInput[]
    disconnect?: LoginWhereUniqueInput | LoginWhereUniqueInput[]
    delete?: LoginWhereUniqueInput | LoginWhereUniqueInput[]
    connect?: LoginWhereUniqueInput | LoginWhereUniqueInput[]
    update?: LoginUpdateWithWhereUniqueWithoutCongregationInput | LoginUpdateWithWhereUniqueWithoutCongregationInput[]
    updateMany?: LoginUpdateManyWithWhereWithoutCongregationInput | LoginUpdateManyWithWhereWithoutCongregationInput[]
    deleteMany?: LoginScalarWhereInput | LoginScalarWhereInput[]
  }

  export type PublisherUncheckedUpdateManyWithoutCongregationNestedInput = {
    create?: XOR<PublisherCreateWithoutCongregationInput, PublisherUncheckedCreateWithoutCongregationInput> | PublisherCreateWithoutCongregationInput[] | PublisherUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: PublisherCreateOrConnectWithoutCongregationInput | PublisherCreateOrConnectWithoutCongregationInput[]
    upsert?: PublisherUpsertWithWhereUniqueWithoutCongregationInput | PublisherUpsertWithWhereUniqueWithoutCongregationInput[]
    createMany?: PublisherCreateManyCongregationInputEnvelope
    set?: PublisherWhereUniqueInput | PublisherWhereUniqueInput[]
    disconnect?: PublisherWhereUniqueInput | PublisherWhereUniqueInput[]
    delete?: PublisherWhereUniqueInput | PublisherWhereUniqueInput[]
    connect?: PublisherWhereUniqueInput | PublisherWhereUniqueInput[]
    update?: PublisherUpdateWithWhereUniqueWithoutCongregationInput | PublisherUpdateWithWhereUniqueWithoutCongregationInput[]
    updateMany?: PublisherUpdateManyWithWhereWithoutCongregationInput | PublisherUpdateManyWithWhereWithoutCongregationInput[]
    deleteMany?: PublisherScalarWhereInput | PublisherScalarWhereInput[]
  }

  export type TerritoryUncheckedUpdateManyWithoutCongregationNestedInput = {
    create?: XOR<TerritoryCreateWithoutCongregationInput, TerritoryUncheckedCreateWithoutCongregationInput> | TerritoryCreateWithoutCongregationInput[] | TerritoryUncheckedCreateWithoutCongregationInput[]
    connectOrCreate?: TerritoryCreateOrConnectWithoutCongregationInput | TerritoryCreateOrConnectWithoutCongregationInput[]
    upsert?: TerritoryUpsertWithWhereUniqueWithoutCongregationInput | TerritoryUpsertWithWhereUniqueWithoutCongregationInput[]
    createMany?: TerritoryCreateManyCongregationInputEnvelope
    set?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    disconnect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    delete?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    connect?: TerritoryWhereUniqueInput | TerritoryWhereUniqueInput[]
    update?: TerritoryUpdateWithWhereUniqueWithoutCongregationInput | TerritoryUpdateWithWhereUniqueWithoutCongregationInput[]
    updateMany?: TerritoryUpdateManyWithWhereWithoutCongregationInput | TerritoryUpdateManyWithWhereWithoutCongregationInput[]
    deleteMany?: TerritoryScalarWhereInput | TerritoryScalarWhereInput[]
  }

  export type BuildingCreateNestedOneWithoutDoorInput = {
    create?: XOR<BuildingCreateWithoutDoorInput, BuildingUncheckedCreateWithoutDoorInput>
    connectOrCreate?: BuildingCreateOrConnectWithoutDoorInput
    connect?: BuildingWhereUniqueInput
  }

  export type CongregationCreateNestedOneWithoutDoorInput = {
    create?: XOR<CongregationCreateWithoutDoorInput, CongregationUncheckedCreateWithoutDoorInput>
    connectOrCreate?: CongregationCreateOrConnectWithoutDoorInput
    connect?: CongregationWhereUniqueInput
  }

  export type LanguageCreateNestedOneWithoutDoorInput = {
    create?: XOR<LanguageCreateWithoutDoorInput, LanguageUncheckedCreateWithoutDoorInput>
    connectOrCreate?: LanguageCreateOrConnectWithoutDoorInput
    connect?: LanguageWhereUniqueInput
  }

  export type BuildingUpdateOneWithoutDoorNestedInput = {
    create?: XOR<BuildingCreateWithoutDoorInput, BuildingUncheckedCreateWithoutDoorInput>
    connectOrCreate?: BuildingCreateOrConnectWithoutDoorInput
    upsert?: BuildingUpsertWithoutDoorInput
    disconnect?: BuildingWhereInput | boolean
    delete?: BuildingWhereInput | boolean
    connect?: BuildingWhereUniqueInput
    update?: XOR<XOR<BuildingUpdateToOneWithWhereWithoutDoorInput, BuildingUpdateWithoutDoorInput>, BuildingUncheckedUpdateWithoutDoorInput>
  }

  export type CongregationUpdateOneRequiredWithoutDoorNestedInput = {
    create?: XOR<CongregationCreateWithoutDoorInput, CongregationUncheckedCreateWithoutDoorInput>
    connectOrCreate?: CongregationCreateOrConnectWithoutDoorInput
    upsert?: CongregationUpsertWithoutDoorInput
    connect?: CongregationWhereUniqueInput
    update?: XOR<XOR<CongregationUpdateToOneWithWhereWithoutDoorInput, CongregationUpdateWithoutDoorInput>, CongregationUncheckedUpdateWithoutDoorInput>
  }

  export type LanguageUpdateOneRequiredWithoutDoorNestedInput = {
    create?: XOR<LanguageCreateWithoutDoorInput, LanguageUncheckedCreateWithoutDoorInput>
    connectOrCreate?: LanguageCreateOrConnectWithoutDoorInput
    upsert?: LanguageUpsertWithoutDoorInput
    connect?: LanguageWhereUniqueInput
    update?: XOR<XOR<LanguageUpdateToOneWithWhereWithoutDoorInput, LanguageUpdateWithoutDoorInput>, LanguageUncheckedUpdateWithoutDoorInput>
  }

  export type DoorCreateNestedManyWithoutLanguageInput = {
    create?: XOR<DoorCreateWithoutLanguageInput, DoorUncheckedCreateWithoutLanguageInput> | DoorCreateWithoutLanguageInput[] | DoorUncheckedCreateWithoutLanguageInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutLanguageInput | DoorCreateOrConnectWithoutLanguageInput[]
    createMany?: DoorCreateManyLanguageInputEnvelope
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
  }

  export type CongregationCreateNestedOneWithoutLanguageInput = {
    create?: XOR<CongregationCreateWithoutLanguageInput, CongregationUncheckedCreateWithoutLanguageInput>
    connectOrCreate?: CongregationCreateOrConnectWithoutLanguageInput
    connect?: CongregationWhereUniqueInput
  }

  export type DoorUncheckedCreateNestedManyWithoutLanguageInput = {
    create?: XOR<DoorCreateWithoutLanguageInput, DoorUncheckedCreateWithoutLanguageInput> | DoorCreateWithoutLanguageInput[] | DoorUncheckedCreateWithoutLanguageInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutLanguageInput | DoorCreateOrConnectWithoutLanguageInput[]
    createMany?: DoorCreateManyLanguageInputEnvelope
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DoorUpdateManyWithoutLanguageNestedInput = {
    create?: XOR<DoorCreateWithoutLanguageInput, DoorUncheckedCreateWithoutLanguageInput> | DoorCreateWithoutLanguageInput[] | DoorUncheckedCreateWithoutLanguageInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutLanguageInput | DoorCreateOrConnectWithoutLanguageInput[]
    upsert?: DoorUpsertWithWhereUniqueWithoutLanguageInput | DoorUpsertWithWhereUniqueWithoutLanguageInput[]
    createMany?: DoorCreateManyLanguageInputEnvelope
    set?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    disconnect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    delete?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    update?: DoorUpdateWithWhereUniqueWithoutLanguageInput | DoorUpdateWithWhereUniqueWithoutLanguageInput[]
    updateMany?: DoorUpdateManyWithWhereWithoutLanguageInput | DoorUpdateManyWithWhereWithoutLanguageInput[]
    deleteMany?: DoorScalarWhereInput | DoorScalarWhereInput[]
  }

  export type CongregationUpdateOneRequiredWithoutLanguageNestedInput = {
    create?: XOR<CongregationCreateWithoutLanguageInput, CongregationUncheckedCreateWithoutLanguageInput>
    connectOrCreate?: CongregationCreateOrConnectWithoutLanguageInput
    upsert?: CongregationUpsertWithoutLanguageInput
    connect?: CongregationWhereUniqueInput
    update?: XOR<XOR<CongregationUpdateToOneWithWhereWithoutLanguageInput, CongregationUpdateWithoutLanguageInput>, CongregationUncheckedUpdateWithoutLanguageInput>
  }

  export type DoorUncheckedUpdateManyWithoutLanguageNestedInput = {
    create?: XOR<DoorCreateWithoutLanguageInput, DoorUncheckedCreateWithoutLanguageInput> | DoorCreateWithoutLanguageInput[] | DoorUncheckedCreateWithoutLanguageInput[]
    connectOrCreate?: DoorCreateOrConnectWithoutLanguageInput | DoorCreateOrConnectWithoutLanguageInput[]
    upsert?: DoorUpsertWithWhereUniqueWithoutLanguageInput | DoorUpsertWithWhereUniqueWithoutLanguageInput[]
    createMany?: DoorCreateManyLanguageInputEnvelope
    set?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    disconnect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    delete?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    connect?: DoorWhereUniqueInput | DoorWhereUniqueInput[]
    update?: DoorUpdateWithWhereUniqueWithoutLanguageInput | DoorUpdateWithWhereUniqueWithoutLanguageInput[]
    updateMany?: DoorUpdateManyWithWhereWithoutLanguageInput | DoorUpdateManyWithWhereWithoutLanguageInput[]
    deleteMany?: DoorScalarWhereInput | DoorScalarWhereInput[]
  }

  export type CongregationCreateNestedOneWithoutPublisherInput = {
    create?: XOR<CongregationCreateWithoutPublisherInput, CongregationUncheckedCreateWithoutPublisherInput>
    connectOrCreate?: CongregationCreateOrConnectWithoutPublisherInput
    connect?: CongregationWhereUniqueInput
  }

  export type CongregationUpdateOneWithoutPublisherNestedInput = {
    create?: XOR<CongregationCreateWithoutPublisherInput, CongregationUncheckedCreateWithoutPublisherInput>
    connectOrCreate?: CongregationCreateOrConnectWithoutPublisherInput
    upsert?: CongregationUpsertWithoutPublisherInput
    disconnect?: CongregationWhereInput | boolean
    delete?: CongregationWhereInput | boolean
    connect?: CongregationWhereUniqueInput
    update?: XOR<XOR<CongregationUpdateToOneWithWhereWithoutPublisherInput, CongregationUpdateWithoutPublisherInput>, CongregationUncheckedUpdateWithoutPublisherInput>
  }

  export type BuildingCreateNestedManyWithoutTerritoryInput = {
    create?: XOR<BuildingCreateWithoutTerritoryInput, BuildingUncheckedCreateWithoutTerritoryInput> | BuildingCreateWithoutTerritoryInput[] | BuildingUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutTerritoryInput | BuildingCreateOrConnectWithoutTerritoryInput[]
    createMany?: BuildingCreateManyTerritoryInputEnvelope
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
  }

  export type CongregationCreateNestedOneWithoutTerritoryInput = {
    create?: XOR<CongregationCreateWithoutTerritoryInput, CongregationUncheckedCreateWithoutTerritoryInput>
    connectOrCreate?: CongregationCreateOrConnectWithoutTerritoryInput
    connect?: CongregationWhereUniqueInput
  }

  export type BuildingUncheckedCreateNestedManyWithoutTerritoryInput = {
    create?: XOR<BuildingCreateWithoutTerritoryInput, BuildingUncheckedCreateWithoutTerritoryInput> | BuildingCreateWithoutTerritoryInput[] | BuildingUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutTerritoryInput | BuildingCreateOrConnectWithoutTerritoryInput[]
    createMany?: BuildingCreateManyTerritoryInputEnvelope
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
  }

  export type BuildingUpdateManyWithoutTerritoryNestedInput = {
    create?: XOR<BuildingCreateWithoutTerritoryInput, BuildingUncheckedCreateWithoutTerritoryInput> | BuildingCreateWithoutTerritoryInput[] | BuildingUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutTerritoryInput | BuildingCreateOrConnectWithoutTerritoryInput[]
    upsert?: BuildingUpsertWithWhereUniqueWithoutTerritoryInput | BuildingUpsertWithWhereUniqueWithoutTerritoryInput[]
    createMany?: BuildingCreateManyTerritoryInputEnvelope
    set?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    disconnect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    delete?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    update?: BuildingUpdateWithWhereUniqueWithoutTerritoryInput | BuildingUpdateWithWhereUniqueWithoutTerritoryInput[]
    updateMany?: BuildingUpdateManyWithWhereWithoutTerritoryInput | BuildingUpdateManyWithWhereWithoutTerritoryInput[]
    deleteMany?: BuildingScalarWhereInput | BuildingScalarWhereInput[]
  }

  export type CongregationUpdateOneWithoutTerritoryNestedInput = {
    create?: XOR<CongregationCreateWithoutTerritoryInput, CongregationUncheckedCreateWithoutTerritoryInput>
    connectOrCreate?: CongregationCreateOrConnectWithoutTerritoryInput
    upsert?: CongregationUpsertWithoutTerritoryInput
    disconnect?: CongregationWhereInput | boolean
    delete?: CongregationWhereInput | boolean
    connect?: CongregationWhereUniqueInput
    update?: XOR<XOR<CongregationUpdateToOneWithWhereWithoutTerritoryInput, CongregationUpdateWithoutTerritoryInput>, CongregationUncheckedUpdateWithoutTerritoryInput>
  }

  export type BuildingUncheckedUpdateManyWithoutTerritoryNestedInput = {
    create?: XOR<BuildingCreateWithoutTerritoryInput, BuildingUncheckedCreateWithoutTerritoryInput> | BuildingCreateWithoutTerritoryInput[] | BuildingUncheckedCreateWithoutTerritoryInput[]
    connectOrCreate?: BuildingCreateOrConnectWithoutTerritoryInput | BuildingCreateOrConnectWithoutTerritoryInput[]
    upsert?: BuildingUpsertWithWhereUniqueWithoutTerritoryInput | BuildingUpsertWithWhereUniqueWithoutTerritoryInput[]
    createMany?: BuildingCreateManyTerritoryInputEnvelope
    set?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    disconnect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    delete?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    connect?: BuildingWhereUniqueInput | BuildingWhereUniqueInput[]
    update?: BuildingUpdateWithWhereUniqueWithoutTerritoryInput | BuildingUpdateWithWhereUniqueWithoutTerritoryInput[]
    updateMany?: BuildingUpdateManyWithWhereWithoutTerritoryInput | BuildingUpdateManyWithWhereWithoutTerritoryInput[]
    deleteMany?: BuildingScalarWhereInput | BuildingScalarWhereInput[]
  }

  export type CongregationCreateNestedOneWithoutLoginInput = {
    create?: XOR<CongregationCreateWithoutLoginInput, CongregationUncheckedCreateWithoutLoginInput>
    connectOrCreate?: CongregationCreateOrConnectWithoutLoginInput
    connect?: CongregationWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CongregationUpdateOneRequiredWithoutLoginNestedInput = {
    create?: XOR<CongregationCreateWithoutLoginInput, CongregationUncheckedCreateWithoutLoginInput>
    connectOrCreate?: CongregationCreateOrConnectWithoutLoginInput
    upsert?: CongregationUpsertWithoutLoginInput
    connect?: CongregationWhereUniqueInput
    update?: XOR<XOR<CongregationUpdateToOneWithWhereWithoutLoginInput, CongregationUpdateWithoutLoginInput>, CongregationUncheckedUpdateWithoutLoginInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TerritoryCreateWithoutBuildingInput = {
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Congregation?: CongregationCreateNestedOneWithoutTerritoryInput
  }

  export type TerritoryUncheckedCreateWithoutBuildingInput = {
    idTerritory?: number
    name?: string | null
    congregation_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type TerritoryCreateOrConnectWithoutBuildingInput = {
    where: TerritoryWhereUniqueInput
    create: XOR<TerritoryCreateWithoutBuildingInput, TerritoryUncheckedCreateWithoutBuildingInput>
  }

  export type DoorCreateWithoutBuildingInput = {
    language?: string | null
    information_name?: string | null
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
    Congregation: CongregationCreateNestedOneWithoutDoorInput
    Language: LanguageCreateNestedOneWithoutDoorInput
  }

  export type DoorUncheckedCreateWithoutBuildingInput = {
    idDoor?: number
    language?: string | null
    information_name?: string | null
    id_cong_app: number
    id_cong_lang: number
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type DoorCreateOrConnectWithoutBuildingInput = {
    where: DoorWhereUniqueInput
    create: XOR<DoorCreateWithoutBuildingInput, DoorUncheckedCreateWithoutBuildingInput>
  }

  export type DoorCreateManyBuildingInputEnvelope = {
    data: DoorCreateManyBuildingInput | DoorCreateManyBuildingInput[]
    skipDuplicates?: boolean
  }

  export type TerritoryUpsertWithoutBuildingInput = {
    update: XOR<TerritoryUpdateWithoutBuildingInput, TerritoryUncheckedUpdateWithoutBuildingInput>
    create: XOR<TerritoryCreateWithoutBuildingInput, TerritoryUncheckedCreateWithoutBuildingInput>
    where?: TerritoryWhereInput
  }

  export type TerritoryUpdateToOneWithWhereWithoutBuildingInput = {
    where?: TerritoryWhereInput
    data: XOR<TerritoryUpdateWithoutBuildingInput, TerritoryUncheckedUpdateWithoutBuildingInput>
  }

  export type TerritoryUpdateWithoutBuildingInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Congregation?: CongregationUpdateOneWithoutTerritoryNestedInput
  }

  export type TerritoryUncheckedUpdateWithoutBuildingInput = {
    idTerritory?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    congregation_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoorUpsertWithWhereUniqueWithoutBuildingInput = {
    where: DoorWhereUniqueInput
    update: XOR<DoorUpdateWithoutBuildingInput, DoorUncheckedUpdateWithoutBuildingInput>
    create: XOR<DoorCreateWithoutBuildingInput, DoorUncheckedCreateWithoutBuildingInput>
  }

  export type DoorUpdateWithWhereUniqueWithoutBuildingInput = {
    where: DoorWhereUniqueInput
    data: XOR<DoorUpdateWithoutBuildingInput, DoorUncheckedUpdateWithoutBuildingInput>
  }

  export type DoorUpdateManyWithWhereWithoutBuildingInput = {
    where: DoorScalarWhereInput
    data: XOR<DoorUpdateManyMutationInput, DoorUncheckedUpdateManyWithoutBuildingInput>
  }

  export type DoorScalarWhereInput = {
    AND?: DoorScalarWhereInput | DoorScalarWhereInput[]
    OR?: DoorScalarWhereInput[]
    NOT?: DoorScalarWhereInput | DoorScalarWhereInput[]
    idDoor?: IntFilter<"Door"> | number
    language?: StringNullableFilter<"Door"> | string | null
    information_name?: StringNullableFilter<"Door"> | string | null
    building_id?: IntNullableFilter<"Door"> | number | null
    id_cong_app?: IntFilter<"Door"> | number
    id_cong_lang?: IntFilter<"Door"> | number
    lastModified?: DateTimeNullableFilter<"Door"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Door"> | Date | string | null
  }

  export type DoorCreateWithoutCongregationInput = {
    language?: string | null
    information_name?: string | null
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
    Building?: BuildingCreateNestedOneWithoutDoorInput
    Language: LanguageCreateNestedOneWithoutDoorInput
  }

  export type DoorUncheckedCreateWithoutCongregationInput = {
    idDoor?: number
    language?: string | null
    information_name?: string | null
    building_id?: number | null
    id_cong_lang: number
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type DoorCreateOrConnectWithoutCongregationInput = {
    where: DoorWhereUniqueInput
    create: XOR<DoorCreateWithoutCongregationInput, DoorUncheckedCreateWithoutCongregationInput>
  }

  export type DoorCreateManyCongregationInputEnvelope = {
    data: DoorCreateManyCongregationInput | DoorCreateManyCongregationInput[]
    skipDuplicates?: boolean
  }

  export type LanguageCreateWithoutCongregationInput = {
    id_cong_lang: number
    name: string
    Color?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorCreateNestedManyWithoutLanguageInput
  }

  export type LanguageUncheckedCreateWithoutCongregationInput = {
    idLanguage?: number
    id_cong_lang: number
    name: string
    Color?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorUncheckedCreateNestedManyWithoutLanguageInput
  }

  export type LanguageCreateOrConnectWithoutCongregationInput = {
    where: LanguageWhereUniqueInput
    create: XOR<LanguageCreateWithoutCongregationInput, LanguageUncheckedCreateWithoutCongregationInput>
  }

  export type LanguageCreateManyCongregationInputEnvelope = {
    data: LanguageCreateManyCongregationInput | LanguageCreateManyCongregationInput[]
    skipDuplicates?: boolean
  }

  export type LoginCreateWithoutCongregationInput = {
    name: string
    email: string
    password?: string | null
    googleSignIn?: boolean
    whatsapp: string
    createdAt?: Date | string
    updatedAt?: Date | string
    loginCount?: number
  }

  export type LoginUncheckedCreateWithoutCongregationInput = {
    id?: number
    name: string
    email: string
    password?: string | null
    googleSignIn?: boolean
    whatsapp: string
    createdAt?: Date | string
    updatedAt?: Date | string
    loginCount?: number
  }

  export type LoginCreateOrConnectWithoutCongregationInput = {
    where: LoginWhereUniqueInput
    create: XOR<LoginCreateWithoutCongregationInput, LoginUncheckedCreateWithoutCongregationInput>
  }

  export type LoginCreateManyCongregationInputEnvelope = {
    data: LoginCreateManyCongregationInput | LoginCreateManyCongregationInput[]
    skipDuplicates?: boolean
  }

  export type PublisherCreateWithoutCongregationInput = {
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PublisherUncheckedCreateWithoutCongregationInput = {
    idPublisher?: number
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PublisherCreateOrConnectWithoutCongregationInput = {
    where: PublisherWhereUniqueInput
    create: XOR<PublisherCreateWithoutCongregationInput, PublisherUncheckedCreateWithoutCongregationInput>
  }

  export type PublisherCreateManyCongregationInputEnvelope = {
    data: PublisherCreateManyCongregationInput | PublisherCreateManyCongregationInput[]
    skipDuplicates?: boolean
  }

  export type TerritoryCreateWithoutCongregationInput = {
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Building?: BuildingCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryUncheckedCreateWithoutCongregationInput = {
    idTerritory?: number
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Building?: BuildingUncheckedCreateNestedManyWithoutTerritoryInput
  }

  export type TerritoryCreateOrConnectWithoutCongregationInput = {
    where: TerritoryWhereUniqueInput
    create: XOR<TerritoryCreateWithoutCongregationInput, TerritoryUncheckedCreateWithoutCongregationInput>
  }

  export type TerritoryCreateManyCongregationInputEnvelope = {
    data: TerritoryCreateManyCongregationInput | TerritoryCreateManyCongregationInput[]
    skipDuplicates?: boolean
  }

  export type DoorUpsertWithWhereUniqueWithoutCongregationInput = {
    where: DoorWhereUniqueInput
    update: XOR<DoorUpdateWithoutCongregationInput, DoorUncheckedUpdateWithoutCongregationInput>
    create: XOR<DoorCreateWithoutCongregationInput, DoorUncheckedCreateWithoutCongregationInput>
  }

  export type DoorUpdateWithWhereUniqueWithoutCongregationInput = {
    where: DoorWhereUniqueInput
    data: XOR<DoorUpdateWithoutCongregationInput, DoorUncheckedUpdateWithoutCongregationInput>
  }

  export type DoorUpdateManyWithWhereWithoutCongregationInput = {
    where: DoorScalarWhereInput
    data: XOR<DoorUpdateManyMutationInput, DoorUncheckedUpdateManyWithoutCongregationInput>
  }

  export type LanguageUpsertWithWhereUniqueWithoutCongregationInput = {
    where: LanguageWhereUniqueInput
    update: XOR<LanguageUpdateWithoutCongregationInput, LanguageUncheckedUpdateWithoutCongregationInput>
    create: XOR<LanguageCreateWithoutCongregationInput, LanguageUncheckedCreateWithoutCongregationInput>
  }

  export type LanguageUpdateWithWhereUniqueWithoutCongregationInput = {
    where: LanguageWhereUniqueInput
    data: XOR<LanguageUpdateWithoutCongregationInput, LanguageUncheckedUpdateWithoutCongregationInput>
  }

  export type LanguageUpdateManyWithWhereWithoutCongregationInput = {
    where: LanguageScalarWhereInput
    data: XOR<LanguageUpdateManyMutationInput, LanguageUncheckedUpdateManyWithoutCongregationInput>
  }

  export type LanguageScalarWhereInput = {
    AND?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
    OR?: LanguageScalarWhereInput[]
    NOT?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
    idLanguage?: IntFilter<"Language"> | number
    id_cong_app?: IntFilter<"Language"> | number
    id_cong_lang?: IntFilter<"Language"> | number
    name?: StringFilter<"Language"> | string
    Color?: IntNullableFilter<"Language"> | number | null
    createdAt?: DateTimeFilter<"Language"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Language"> | Date | string | null
  }

  export type LoginUpsertWithWhereUniqueWithoutCongregationInput = {
    where: LoginWhereUniqueInput
    update: XOR<LoginUpdateWithoutCongregationInput, LoginUncheckedUpdateWithoutCongregationInput>
    create: XOR<LoginCreateWithoutCongregationInput, LoginUncheckedCreateWithoutCongregationInput>
  }

  export type LoginUpdateWithWhereUniqueWithoutCongregationInput = {
    where: LoginWhereUniqueInput
    data: XOR<LoginUpdateWithoutCongregationInput, LoginUncheckedUpdateWithoutCongregationInput>
  }

  export type LoginUpdateManyWithWhereWithoutCongregationInput = {
    where: LoginScalarWhereInput
    data: XOR<LoginUpdateManyMutationInput, LoginUncheckedUpdateManyWithoutCongregationInput>
  }

  export type LoginScalarWhereInput = {
    AND?: LoginScalarWhereInput | LoginScalarWhereInput[]
    OR?: LoginScalarWhereInput[]
    NOT?: LoginScalarWhereInput | LoginScalarWhereInput[]
    id?: IntFilter<"Login"> | number
    name?: StringFilter<"Login"> | string
    email?: StringFilter<"Login"> | string
    password?: StringNullableFilter<"Login"> | string | null
    googleSignIn?: BoolFilter<"Login"> | boolean
    whatsapp?: StringFilter<"Login"> | string
    congregationNumber?: IntFilter<"Login"> | number
    createdAt?: DateTimeFilter<"Login"> | Date | string
    updatedAt?: DateTimeFilter<"Login"> | Date | string
    loginCount?: IntFilter<"Login"> | number
  }

  export type PublisherUpsertWithWhereUniqueWithoutCongregationInput = {
    where: PublisherWhereUniqueInput
    update: XOR<PublisherUpdateWithoutCongregationInput, PublisherUncheckedUpdateWithoutCongregationInput>
    create: XOR<PublisherCreateWithoutCongregationInput, PublisherUncheckedCreateWithoutCongregationInput>
  }

  export type PublisherUpdateWithWhereUniqueWithoutCongregationInput = {
    where: PublisherWhereUniqueInput
    data: XOR<PublisherUpdateWithoutCongregationInput, PublisherUncheckedUpdateWithoutCongregationInput>
  }

  export type PublisherUpdateManyWithWhereWithoutCongregationInput = {
    where: PublisherScalarWhereInput
    data: XOR<PublisherUpdateManyMutationInput, PublisherUncheckedUpdateManyWithoutCongregationInput>
  }

  export type PublisherScalarWhereInput = {
    AND?: PublisherScalarWhereInput | PublisherScalarWhereInput[]
    OR?: PublisherScalarWhereInput[]
    NOT?: PublisherScalarWhereInput | PublisherScalarWhereInput[]
    idPublisher?: IntFilter<"Publisher"> | number
    name?: StringNullableFilter<"Publisher"> | string | null
    congregation_id?: IntNullableFilter<"Publisher"> | number | null
    createdAt?: DateTimeFilter<"Publisher"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Publisher"> | Date | string | null
  }

  export type TerritoryUpsertWithWhereUniqueWithoutCongregationInput = {
    where: TerritoryWhereUniqueInput
    update: XOR<TerritoryUpdateWithoutCongregationInput, TerritoryUncheckedUpdateWithoutCongregationInput>
    create: XOR<TerritoryCreateWithoutCongregationInput, TerritoryUncheckedCreateWithoutCongregationInput>
  }

  export type TerritoryUpdateWithWhereUniqueWithoutCongregationInput = {
    where: TerritoryWhereUniqueInput
    data: XOR<TerritoryUpdateWithoutCongregationInput, TerritoryUncheckedUpdateWithoutCongregationInput>
  }

  export type TerritoryUpdateManyWithWhereWithoutCongregationInput = {
    where: TerritoryScalarWhereInput
    data: XOR<TerritoryUpdateManyMutationInput, TerritoryUncheckedUpdateManyWithoutCongregationInput>
  }

  export type TerritoryScalarWhereInput = {
    AND?: TerritoryScalarWhereInput | TerritoryScalarWhereInput[]
    OR?: TerritoryScalarWhereInput[]
    NOT?: TerritoryScalarWhereInput | TerritoryScalarWhereInput[]
    idTerritory?: IntFilter<"Territory"> | number
    name?: StringNullableFilter<"Territory"> | string | null
    congregation_id?: IntNullableFilter<"Territory"> | number | null
    createdAt?: DateTimeFilter<"Territory"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Territory"> | Date | string | null
  }

  export type BuildingCreateWithoutDoorInput = {
    lat: number
    long: number
    last_modified?: Date | string
    address?: string | null
    updatedAt?: Date | string | null
    Territory?: TerritoryCreateNestedOneWithoutBuildingInput
  }

  export type BuildingUncheckedCreateWithoutDoorInput = {
    idBuilding?: number
    lat: number
    long: number
    territory_id?: number | null
    last_modified?: Date | string
    address?: string | null
    updatedAt?: Date | string | null
  }

  export type BuildingCreateOrConnectWithoutDoorInput = {
    where: BuildingWhereUniqueInput
    create: XOR<BuildingCreateWithoutDoorInput, BuildingUncheckedCreateWithoutDoorInput>
  }

  export type CongregationCreateWithoutDoorInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Language?: LanguageCreateNestedManyWithoutCongregationInput
    Login?: LoginCreateNestedManyWithoutCongregationInput
    Publisher?: PublisherCreateNestedManyWithoutCongregationInput
    Territory?: TerritoryCreateNestedManyWithoutCongregationInput
  }

  export type CongregationUncheckedCreateWithoutDoorInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Language?: LanguageUncheckedCreateNestedManyWithoutCongregationInput
    Login?: LoginUncheckedCreateNestedManyWithoutCongregationInput
    Publisher?: PublisherUncheckedCreateNestedManyWithoutCongregationInput
    Territory?: TerritoryUncheckedCreateNestedManyWithoutCongregationInput
  }

  export type CongregationCreateOrConnectWithoutDoorInput = {
    where: CongregationWhereUniqueInput
    create: XOR<CongregationCreateWithoutDoorInput, CongregationUncheckedCreateWithoutDoorInput>
  }

  export type LanguageCreateWithoutDoorInput = {
    id_cong_lang: number
    name: string
    Color?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Congregation: CongregationCreateNestedOneWithoutLanguageInput
  }

  export type LanguageUncheckedCreateWithoutDoorInput = {
    idLanguage?: number
    id_cong_app: number
    id_cong_lang: number
    name: string
    Color?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type LanguageCreateOrConnectWithoutDoorInput = {
    where: LanguageWhereUniqueInput
    create: XOR<LanguageCreateWithoutDoorInput, LanguageUncheckedCreateWithoutDoorInput>
  }

  export type BuildingUpsertWithoutDoorInput = {
    update: XOR<BuildingUpdateWithoutDoorInput, BuildingUncheckedUpdateWithoutDoorInput>
    create: XOR<BuildingCreateWithoutDoorInput, BuildingUncheckedCreateWithoutDoorInput>
    where?: BuildingWhereInput
  }

  export type BuildingUpdateToOneWithWhereWithoutDoorInput = {
    where?: BuildingWhereInput
    data: XOR<BuildingUpdateWithoutDoorInput, BuildingUncheckedUpdateWithoutDoorInput>
  }

  export type BuildingUpdateWithoutDoorInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Territory?: TerritoryUpdateOneWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateWithoutDoorInput = {
    idBuilding?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    territory_id?: NullableIntFieldUpdateOperationsInput | number | null
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CongregationUpsertWithoutDoorInput = {
    update: XOR<CongregationUpdateWithoutDoorInput, CongregationUncheckedUpdateWithoutDoorInput>
    create: XOR<CongregationCreateWithoutDoorInput, CongregationUncheckedCreateWithoutDoorInput>
    where?: CongregationWhereInput
  }

  export type CongregationUpdateToOneWithWhereWithoutDoorInput = {
    where?: CongregationWhereInput
    data: XOR<CongregationUpdateWithoutDoorInput, CongregationUncheckedUpdateWithoutDoorInput>
  }

  export type CongregationUpdateWithoutDoorInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Language?: LanguageUpdateManyWithoutCongregationNestedInput
    Login?: LoginUpdateManyWithoutCongregationNestedInput
    Publisher?: PublisherUpdateManyWithoutCongregationNestedInput
    Territory?: TerritoryUpdateManyWithoutCongregationNestedInput
  }

  export type CongregationUncheckedUpdateWithoutDoorInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Language?: LanguageUncheckedUpdateManyWithoutCongregationNestedInput
    Login?: LoginUncheckedUpdateManyWithoutCongregationNestedInput
    Publisher?: PublisherUncheckedUpdateManyWithoutCongregationNestedInput
    Territory?: TerritoryUncheckedUpdateManyWithoutCongregationNestedInput
  }

  export type LanguageUpsertWithoutDoorInput = {
    update: XOR<LanguageUpdateWithoutDoorInput, LanguageUncheckedUpdateWithoutDoorInput>
    create: XOR<LanguageCreateWithoutDoorInput, LanguageUncheckedCreateWithoutDoorInput>
    where?: LanguageWhereInput
  }

  export type LanguageUpdateToOneWithWhereWithoutDoorInput = {
    where?: LanguageWhereInput
    data: XOR<LanguageUpdateWithoutDoorInput, LanguageUncheckedUpdateWithoutDoorInput>
  }

  export type LanguageUpdateWithoutDoorInput = {
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Color?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Congregation?: CongregationUpdateOneRequiredWithoutLanguageNestedInput
  }

  export type LanguageUncheckedUpdateWithoutDoorInput = {
    idLanguage?: IntFieldUpdateOperationsInput | number
    id_cong_app?: IntFieldUpdateOperationsInput | number
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Color?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoorCreateWithoutLanguageInput = {
    language?: string | null
    information_name?: string | null
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
    Building?: BuildingCreateNestedOneWithoutDoorInput
    Congregation: CongregationCreateNestedOneWithoutDoorInput
  }

  export type DoorUncheckedCreateWithoutLanguageInput = {
    idDoor?: number
    language?: string | null
    information_name?: string | null
    building_id?: number | null
    id_cong_app: number
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type DoorCreateOrConnectWithoutLanguageInput = {
    where: DoorWhereUniqueInput
    create: XOR<DoorCreateWithoutLanguageInput, DoorUncheckedCreateWithoutLanguageInput>
  }

  export type DoorCreateManyLanguageInputEnvelope = {
    data: DoorCreateManyLanguageInput | DoorCreateManyLanguageInput[]
    skipDuplicates?: boolean
  }

  export type CongregationCreateWithoutLanguageInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorCreateNestedManyWithoutCongregationInput
    Login?: LoginCreateNestedManyWithoutCongregationInput
    Publisher?: PublisherCreateNestedManyWithoutCongregationInput
    Territory?: TerritoryCreateNestedManyWithoutCongregationInput
  }

  export type CongregationUncheckedCreateWithoutLanguageInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorUncheckedCreateNestedManyWithoutCongregationInput
    Login?: LoginUncheckedCreateNestedManyWithoutCongregationInput
    Publisher?: PublisherUncheckedCreateNestedManyWithoutCongregationInput
    Territory?: TerritoryUncheckedCreateNestedManyWithoutCongregationInput
  }

  export type CongregationCreateOrConnectWithoutLanguageInput = {
    where: CongregationWhereUniqueInput
    create: XOR<CongregationCreateWithoutLanguageInput, CongregationUncheckedCreateWithoutLanguageInput>
  }

  export type DoorUpsertWithWhereUniqueWithoutLanguageInput = {
    where: DoorWhereUniqueInput
    update: XOR<DoorUpdateWithoutLanguageInput, DoorUncheckedUpdateWithoutLanguageInput>
    create: XOR<DoorCreateWithoutLanguageInput, DoorUncheckedCreateWithoutLanguageInput>
  }

  export type DoorUpdateWithWhereUniqueWithoutLanguageInput = {
    where: DoorWhereUniqueInput
    data: XOR<DoorUpdateWithoutLanguageInput, DoorUncheckedUpdateWithoutLanguageInput>
  }

  export type DoorUpdateManyWithWhereWithoutLanguageInput = {
    where: DoorScalarWhereInput
    data: XOR<DoorUpdateManyMutationInput, DoorUncheckedUpdateManyWithoutLanguageInput>
  }

  export type CongregationUpsertWithoutLanguageInput = {
    update: XOR<CongregationUpdateWithoutLanguageInput, CongregationUncheckedUpdateWithoutLanguageInput>
    create: XOR<CongregationCreateWithoutLanguageInput, CongregationUncheckedCreateWithoutLanguageInput>
    where?: CongregationWhereInput
  }

  export type CongregationUpdateToOneWithWhereWithoutLanguageInput = {
    where?: CongregationWhereInput
    data: XOR<CongregationUpdateWithoutLanguageInput, CongregationUncheckedUpdateWithoutLanguageInput>
  }

  export type CongregationUpdateWithoutLanguageInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUpdateManyWithoutCongregationNestedInput
    Login?: LoginUpdateManyWithoutCongregationNestedInput
    Publisher?: PublisherUpdateManyWithoutCongregationNestedInput
    Territory?: TerritoryUpdateManyWithoutCongregationNestedInput
  }

  export type CongregationUncheckedUpdateWithoutLanguageInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUncheckedUpdateManyWithoutCongregationNestedInput
    Login?: LoginUncheckedUpdateManyWithoutCongregationNestedInput
    Publisher?: PublisherUncheckedUpdateManyWithoutCongregationNestedInput
    Territory?: TerritoryUncheckedUpdateManyWithoutCongregationNestedInput
  }

  export type CongregationCreateWithoutPublisherInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorCreateNestedManyWithoutCongregationInput
    Language?: LanguageCreateNestedManyWithoutCongregationInput
    Login?: LoginCreateNestedManyWithoutCongregationInput
    Territory?: TerritoryCreateNestedManyWithoutCongregationInput
  }

  export type CongregationUncheckedCreateWithoutPublisherInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorUncheckedCreateNestedManyWithoutCongregationInput
    Language?: LanguageUncheckedCreateNestedManyWithoutCongregationInput
    Login?: LoginUncheckedCreateNestedManyWithoutCongregationInput
    Territory?: TerritoryUncheckedCreateNestedManyWithoutCongregationInput
  }

  export type CongregationCreateOrConnectWithoutPublisherInput = {
    where: CongregationWhereUniqueInput
    create: XOR<CongregationCreateWithoutPublisherInput, CongregationUncheckedCreateWithoutPublisherInput>
  }

  export type CongregationUpsertWithoutPublisherInput = {
    update: XOR<CongregationUpdateWithoutPublisherInput, CongregationUncheckedUpdateWithoutPublisherInput>
    create: XOR<CongregationCreateWithoutPublisherInput, CongregationUncheckedCreateWithoutPublisherInput>
    where?: CongregationWhereInput
  }

  export type CongregationUpdateToOneWithWhereWithoutPublisherInput = {
    where?: CongregationWhereInput
    data: XOR<CongregationUpdateWithoutPublisherInput, CongregationUncheckedUpdateWithoutPublisherInput>
  }

  export type CongregationUpdateWithoutPublisherInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUpdateManyWithoutCongregationNestedInput
    Language?: LanguageUpdateManyWithoutCongregationNestedInput
    Login?: LoginUpdateManyWithoutCongregationNestedInput
    Territory?: TerritoryUpdateManyWithoutCongregationNestedInput
  }

  export type CongregationUncheckedUpdateWithoutPublisherInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUncheckedUpdateManyWithoutCongregationNestedInput
    Language?: LanguageUncheckedUpdateManyWithoutCongregationNestedInput
    Login?: LoginUncheckedUpdateManyWithoutCongregationNestedInput
    Territory?: TerritoryUncheckedUpdateManyWithoutCongregationNestedInput
  }

  export type BuildingCreateWithoutTerritoryInput = {
    lat: number
    long: number
    last_modified?: Date | string
    address?: string | null
    updatedAt?: Date | string | null
    Door?: DoorCreateNestedManyWithoutBuildingInput
  }

  export type BuildingUncheckedCreateWithoutTerritoryInput = {
    idBuilding?: number
    lat: number
    long: number
    last_modified?: Date | string
    address?: string | null
    updatedAt?: Date | string | null
    Door?: DoorUncheckedCreateNestedManyWithoutBuildingInput
  }

  export type BuildingCreateOrConnectWithoutTerritoryInput = {
    where: BuildingWhereUniqueInput
    create: XOR<BuildingCreateWithoutTerritoryInput, BuildingUncheckedCreateWithoutTerritoryInput>
  }

  export type BuildingCreateManyTerritoryInputEnvelope = {
    data: BuildingCreateManyTerritoryInput | BuildingCreateManyTerritoryInput[]
    skipDuplicates?: boolean
  }

  export type CongregationCreateWithoutTerritoryInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorCreateNestedManyWithoutCongregationInput
    Language?: LanguageCreateNestedManyWithoutCongregationInput
    Login?: LoginCreateNestedManyWithoutCongregationInput
    Publisher?: PublisherCreateNestedManyWithoutCongregationInput
  }

  export type CongregationUncheckedCreateWithoutTerritoryInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorUncheckedCreateNestedManyWithoutCongregationInput
    Language?: LanguageUncheckedCreateNestedManyWithoutCongregationInput
    Login?: LoginUncheckedCreateNestedManyWithoutCongregationInput
    Publisher?: PublisherUncheckedCreateNestedManyWithoutCongregationInput
  }

  export type CongregationCreateOrConnectWithoutTerritoryInput = {
    where: CongregationWhereUniqueInput
    create: XOR<CongregationCreateWithoutTerritoryInput, CongregationUncheckedCreateWithoutTerritoryInput>
  }

  export type BuildingUpsertWithWhereUniqueWithoutTerritoryInput = {
    where: BuildingWhereUniqueInput
    update: XOR<BuildingUpdateWithoutTerritoryInput, BuildingUncheckedUpdateWithoutTerritoryInput>
    create: XOR<BuildingCreateWithoutTerritoryInput, BuildingUncheckedCreateWithoutTerritoryInput>
  }

  export type BuildingUpdateWithWhereUniqueWithoutTerritoryInput = {
    where: BuildingWhereUniqueInput
    data: XOR<BuildingUpdateWithoutTerritoryInput, BuildingUncheckedUpdateWithoutTerritoryInput>
  }

  export type BuildingUpdateManyWithWhereWithoutTerritoryInput = {
    where: BuildingScalarWhereInput
    data: XOR<BuildingUpdateManyMutationInput, BuildingUncheckedUpdateManyWithoutTerritoryInput>
  }

  export type BuildingScalarWhereInput = {
    AND?: BuildingScalarWhereInput | BuildingScalarWhereInput[]
    OR?: BuildingScalarWhereInput[]
    NOT?: BuildingScalarWhereInput | BuildingScalarWhereInput[]
    idBuilding?: IntFilter<"Building"> | number
    lat?: FloatFilter<"Building"> | number
    long?: FloatFilter<"Building"> | number
    territory_id?: IntNullableFilter<"Building"> | number | null
    last_modified?: DateTimeFilter<"Building"> | Date | string
    address?: StringNullableFilter<"Building"> | string | null
    updatedAt?: DateTimeNullableFilter<"Building"> | Date | string | null
  }

  export type CongregationUpsertWithoutTerritoryInput = {
    update: XOR<CongregationUpdateWithoutTerritoryInput, CongregationUncheckedUpdateWithoutTerritoryInput>
    create: XOR<CongregationCreateWithoutTerritoryInput, CongregationUncheckedCreateWithoutTerritoryInput>
    where?: CongregationWhereInput
  }

  export type CongregationUpdateToOneWithWhereWithoutTerritoryInput = {
    where?: CongregationWhereInput
    data: XOR<CongregationUpdateWithoutTerritoryInput, CongregationUncheckedUpdateWithoutTerritoryInput>
  }

  export type CongregationUpdateWithoutTerritoryInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUpdateManyWithoutCongregationNestedInput
    Language?: LanguageUpdateManyWithoutCongregationNestedInput
    Login?: LoginUpdateManyWithoutCongregationNestedInput
    Publisher?: PublisherUpdateManyWithoutCongregationNestedInput
  }

  export type CongregationUncheckedUpdateWithoutTerritoryInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUncheckedUpdateManyWithoutCongregationNestedInput
    Language?: LanguageUncheckedUpdateManyWithoutCongregationNestedInput
    Login?: LoginUncheckedUpdateManyWithoutCongregationNestedInput
    Publisher?: PublisherUncheckedUpdateManyWithoutCongregationNestedInput
  }

  export type CongregationCreateWithoutLoginInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorCreateNestedManyWithoutCongregationInput
    Language?: LanguageCreateNestedManyWithoutCongregationInput
    Publisher?: PublisherCreateNestedManyWithoutCongregationInput
    Territory?: TerritoryCreateNestedManyWithoutCongregationInput
  }

  export type CongregationUncheckedCreateWithoutLoginInput = {
    idCongregation: number
    name?: string | null
    language?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    Door?: DoorUncheckedCreateNestedManyWithoutCongregationInput
    Language?: LanguageUncheckedCreateNestedManyWithoutCongregationInput
    Publisher?: PublisherUncheckedCreateNestedManyWithoutCongregationInput
    Territory?: TerritoryUncheckedCreateNestedManyWithoutCongregationInput
  }

  export type CongregationCreateOrConnectWithoutLoginInput = {
    where: CongregationWhereUniqueInput
    create: XOR<CongregationCreateWithoutLoginInput, CongregationUncheckedCreateWithoutLoginInput>
  }

  export type CongregationUpsertWithoutLoginInput = {
    update: XOR<CongregationUpdateWithoutLoginInput, CongregationUncheckedUpdateWithoutLoginInput>
    create: XOR<CongregationCreateWithoutLoginInput, CongregationUncheckedCreateWithoutLoginInput>
    where?: CongregationWhereInput
  }

  export type CongregationUpdateToOneWithWhereWithoutLoginInput = {
    where?: CongregationWhereInput
    data: XOR<CongregationUpdateWithoutLoginInput, CongregationUncheckedUpdateWithoutLoginInput>
  }

  export type CongregationUpdateWithoutLoginInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUpdateManyWithoutCongregationNestedInput
    Language?: LanguageUpdateManyWithoutCongregationNestedInput
    Publisher?: PublisherUpdateManyWithoutCongregationNestedInput
    Territory?: TerritoryUpdateManyWithoutCongregationNestedInput
  }

  export type CongregationUncheckedUpdateWithoutLoginInput = {
    idCongregation?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUncheckedUpdateManyWithoutCongregationNestedInput
    Language?: LanguageUncheckedUpdateManyWithoutCongregationNestedInput
    Publisher?: PublisherUncheckedUpdateManyWithoutCongregationNestedInput
    Territory?: TerritoryUncheckedUpdateManyWithoutCongregationNestedInput
  }

  export type DoorCreateManyBuildingInput = {
    idDoor?: number
    language?: string | null
    information_name?: string | null
    id_cong_app: number
    id_cong_lang: number
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type DoorUpdateWithoutBuildingInput = {
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Congregation?: CongregationUpdateOneRequiredWithoutDoorNestedInput
    Language?: LanguageUpdateOneRequiredWithoutDoorNestedInput
  }

  export type DoorUncheckedUpdateWithoutBuildingInput = {
    idDoor?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    id_cong_app?: IntFieldUpdateOperationsInput | number
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoorUncheckedUpdateManyWithoutBuildingInput = {
    idDoor?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    id_cong_app?: IntFieldUpdateOperationsInput | number
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoorCreateManyCongregationInput = {
    idDoor?: number
    language?: string | null
    information_name?: string | null
    building_id?: number | null
    id_cong_lang: number
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type LanguageCreateManyCongregationInput = {
    idLanguage?: number
    id_cong_lang: number
    name: string
    Color?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type LoginCreateManyCongregationInput = {
    id?: number
    name: string
    email: string
    password?: string | null
    googleSignIn?: boolean
    whatsapp: string
    createdAt?: Date | string
    updatedAt?: Date | string
    loginCount?: number
  }

  export type PublisherCreateManyCongregationInput = {
    idPublisher?: number
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type TerritoryCreateManyCongregationInput = {
    idTerritory?: number
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type DoorUpdateWithoutCongregationInput = {
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Building?: BuildingUpdateOneWithoutDoorNestedInput
    Language?: LanguageUpdateOneRequiredWithoutDoorNestedInput
  }

  export type DoorUncheckedUpdateWithoutCongregationInput = {
    idDoor?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    building_id?: NullableIntFieldUpdateOperationsInput | number | null
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoorUncheckedUpdateManyWithoutCongregationInput = {
    idDoor?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    building_id?: NullableIntFieldUpdateOperationsInput | number | null
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LanguageUpdateWithoutCongregationInput = {
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Color?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUpdateManyWithoutLanguageNestedInput
  }

  export type LanguageUncheckedUpdateWithoutCongregationInput = {
    idLanguage?: IntFieldUpdateOperationsInput | number
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Color?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUncheckedUpdateManyWithoutLanguageNestedInput
  }

  export type LanguageUncheckedUpdateManyWithoutCongregationInput = {
    idLanguage?: IntFieldUpdateOperationsInput | number
    id_cong_lang?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Color?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoginUpdateWithoutCongregationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleSignIn?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginCount?: IntFieldUpdateOperationsInput | number
  }

  export type LoginUncheckedUpdateWithoutCongregationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleSignIn?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginCount?: IntFieldUpdateOperationsInput | number
  }

  export type LoginUncheckedUpdateManyWithoutCongregationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    googleSignIn?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginCount?: IntFieldUpdateOperationsInput | number
  }

  export type PublisherUpdateWithoutCongregationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PublisherUncheckedUpdateWithoutCongregationInput = {
    idPublisher?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PublisherUncheckedUpdateManyWithoutCongregationInput = {
    idPublisher?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TerritoryUpdateWithoutCongregationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Building?: BuildingUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryUncheckedUpdateWithoutCongregationInput = {
    idTerritory?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Building?: BuildingUncheckedUpdateManyWithoutTerritoryNestedInput
  }

  export type TerritoryUncheckedUpdateManyWithoutCongregationInput = {
    idTerritory?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoorCreateManyLanguageInput = {
    idDoor?: number
    language?: string | null
    information_name?: string | null
    building_id?: number | null
    id_cong_app: number
    lastModified?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type DoorUpdateWithoutLanguageInput = {
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Building?: BuildingUpdateOneWithoutDoorNestedInput
    Congregation?: CongregationUpdateOneRequiredWithoutDoorNestedInput
  }

  export type DoorUncheckedUpdateWithoutLanguageInput = {
    idDoor?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    building_id?: NullableIntFieldUpdateOperationsInput | number | null
    id_cong_app?: IntFieldUpdateOperationsInput | number
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoorUncheckedUpdateManyWithoutLanguageInput = {
    idDoor?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    information_name?: NullableStringFieldUpdateOperationsInput | string | null
    building_id?: NullableIntFieldUpdateOperationsInput | number | null
    id_cong_app?: IntFieldUpdateOperationsInput | number
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BuildingCreateManyTerritoryInput = {
    idBuilding?: number
    lat: number
    long: number
    last_modified?: Date | string
    address?: string | null
    updatedAt?: Date | string | null
  }

  export type BuildingUpdateWithoutTerritoryInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUpdateManyWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateWithoutTerritoryInput = {
    idBuilding?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Door?: DoorUncheckedUpdateManyWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateManyWithoutTerritoryInput = {
    idBuilding?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}